#! /bin/env ruby
#
# Copyright 2011-2012 Shinichiro Takizawa
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


##############################################################################
# Environment Configuration
##############################################################################
RVPE_LOCATION = ENV['RVPE_LOCATION']

if !RVPE_LOCATION
  $stderr.puts 'set "RVPE_LOCATION" valiable.'
  exit 1
else
  RUBY_LIB_LOCATION = RVPE_LOCATION + '/lib'
end

$: << RUBY_LIB_LOCATION

##############################################################################
# Required libraries
##############################################################################
require 'renkei-vpe'
require 'client_utilities'
require 'optparse'

##############################################################################
# Global variables
##############################################################################
CMD_NAME = 'rvpevmtype'

client = RenkeiVPE::Client.new()
xml_output = false
verbose    = false

list_columns = {
  :id      => { :name => 'ID',
                :size => 4,
                :proc => lambda {|d,e| d.id} },
  :user    => { :name => 'NAME',
                :size => 15,
                :left => true,
                :proc => lambda {|d,e| d['NAME']} },
  :desc    => { :name => 'DESCRIPTION',
                :size => 40,
                :proc => lambda {|d,e| d['DESCRIPTION']} },
  :cpu     => { :name => 'CPU',
                :size => 4,
                :proc => lambda {|d,e| d['CPU']} },
  :mem     => { :name => 'MEM(MB)',
                :size => 8,
                :proc => lambda {|d,e| d['MEMORY']} },

  :default => [:id, :user, :desc, :cpu, :mem]
}

##############################################################################
# Functions
##############################################################################
def exit_on_parse_error(errmsg=nil)
  $stderr.puts errmsg if errmsg
  $stderr.puts
  $stderr.puts "Run '#{CMD_NAME} help' to see the usage."
  exit 1
end

##############################################################################
# main
##############################################################################

begin
  parser = OptionParser.new
  parser.banner = <<EOT
Name
    #{CMD_NAME} - manipulate virtual machine type configuration

Synopsis
    #{CMD_NAME} <command> [ options ]

Description
    This command manipulate VM type configuration.  VM type containts 1)name,
    2)number of CPUs,  3)amount of memory and  4)its short description.  The
    administrator can create/delete VM type and the user can show them.

    The <command> is a name of a subcommand of #{CMD_NAME} command.

Commands
    create <definition_file>
        Create a new VM type

        $ #{CMD_NAME} create definition_file

    delete <type_name>
        Delete a VM type from the system.  <type_name> can be name or id of
        VM type.

        $ #{CMD_NAME} delete small
        $ #{CMD_NAME} delete 1


    list [ -x ] [ -v ]
        List registered VM types.

    show [ -x ] [ -v ] <type_name> [ <type_name> ... ]
        Show information about specified VM types.

        $ #{CMD_NAME} show small large
        $ #{CMD_NAME} show 1 2


    help
        Show this message.

Options:
EOT

  parser.on('-v', ': verbose output mode') do
    verbose = true
  end

  parser.on('-x', '--xml', ': xml output mode') do
    xml_output = true
  end

  parser.on('-h', '--help', ': Show this message') do
    puts parser.help
    exit 0
  end

  parser.parse!(ARGV)
rescue OptionParser::ParseError => e
  exit_on_parse_error(e.message)
rescue => e
  exit_on_parse_error(e.message)
end

command = ARGV.shift
case command
#######################################
# create a VM type
when 'create'
  check_parameters('create', 1)
  begin
    template = File.read(ARGV[0])
  rescue
    $stderr.puts "Can't read definition file: #{ARGV[0]}"
    exit 1
  end

  type = RenkeiVPE::VMType.new(RenkeiVPE::VMType.build_xml, client)
  rc = type.allocate(template)
  if is_successful?(rc)
    puts "VMType[#{type.name}] is registered."
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# delete a VM type
when 'delete'
  check_parameters('delete', 1)

  name = ARGV[0]
  id = get_vmtype_id(name)
  type = RenkeiVPE::VMType.new_with_id(id, client)
  rc = type.delete
  if is_successful?(rc)
    puts "VMType[#{name}] deleted."
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# list VM types
when 'list'
  vmtype_pool = RenkeiVPE::VMTypePool.new(client)
  rc = vmtype_pool.info
  if is_error?(rc)
    $stderr.puts rc.message
    exit 1
  end

  if xml_output
    puts vmtype_pool.to_xml
  else
    print_xml_friendly(list_columns, vmtype_pool, verbose)
  end

#######################################
# show VM types
when 'show'
  check_parameters('show', 1)

  ARGV.each do |type_name|
    id = get_vmtype_id(type_name)
    type = RenkeiVPE::VMType.new_with_id(id, client)
    rc = type.info

    if is_successful?(rc)
      if xml_output
        puts type.to_xml
      else
        str="%-15s: %-30s"

        # print header
        print_header("%-80s", "VM TYPE INFORMATION", true)

        # print ID
        puts str % ['ID', type.id.to_s]  if verbose
        # print Name
        puts str % ['NAME', type.name]
        # print CPU
        puts str % ['CPU', type['CPU']]
        # print Memory
        puts str % ['MEMORY(MB)', type['MEMORY']]
        # print Description
        puts str % ['DESCRIPTION', type['DESCRIPTION']]
      end
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# show help
when 'help'
  puts parser.help

else
  exit_on_parse_error("Unknown command: #{command}")

end


### Local variables:
### mode: Ruby
### coding: utf-8-unix
### indent-tabs-mode: nil
### End:

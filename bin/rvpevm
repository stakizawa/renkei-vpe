#! /bin/env ruby
#
# Copyright 2011-2012 Shinichiro Takizawa
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


##############################################################################
# Environment Configuration
##############################################################################
RVPE_LOCATION = ENV['RVPE_LOCATION']

if !RVPE_LOCATION
  $stderr.puts 'set "RVPE_LOCATION" valiable.'
  exit 1
else
  RUBY_LIB_LOCATION = RVPE_LOCATION + '/lib'
end

$: << RUBY_LIB_LOCATION

##############################################################################
# Required libraries
##############################################################################
require 'renkei-vpe'
require 'renkei-vpe-tool/cli-utilities'
require 'optparse'

include RenkeiVPE::Const
include RenkeiVPETool::CliUtilities

##############################################################################
# Constant variables
##############################################################################
CMD_NAME = 'rvpevm'
CMD_HELP = <<EOS
Name
    #{CMD_NAME} - manipulate virtual machines

Synopsis
    #{CMD_NAME} <command> [ options ]

Description
    This command manipulates VMs.  It provides the following functions;
    1) create/shutdown VMs,  2) suspend/resume VMs,  3)forcibly shutdown/
    restart VMs,  4) save the status of VMs,  and 5)show running VMs and
    history.

    The <command> is a name of a subcommand of #{CMD_NAME} command.

Commands
    create <vm_type> <image_name> <root_key_file> <zone> \\
           <network1>[#<lease1>] [ <network2>[#<lease2>] ... ]
        Create a VM  with the specified <vm_type>  in the specified <zone>.
        The VM  uses  an OS image whose name is <image_name>  and connects
        to  the specified networks,  such as  <network1>  etc.  The default
        gateway  for the VM is provided from the first network.  A user can
        log-in  to  the VM  with a ssh key  whose associated public key is
        <root_key_file>. If an additional option <lease>, which is manually
        assigned  by the administrator  to a user,  is specified  after '#'
        delimiter, the VM uses the lease for its hostname and IP address.

        <vm_type>       can be name or id of a VM type.
        <image_name>    can be name or id of an OS image.
        <root_key_file> is name of ssh public key file.
        <zone_name>     can be name or id of a zone.
        <network>       can be name or id of a network in the zone.
        <lease>         can be name or id of a lease in the network.

        $ #{CMD_NAME} create small centos5.5 ./ssh_pubkey 'tokyo tech' \\
        > csi-grid
        $ #{CMD_NAME} create small centos5.5 ./ssh_pubkey 'tokyo tech' \\
        > csi-grid#vm00.cc.titech.ac.jp

    shutdown <vm_name>
        Shutdown the specified VM.  If a VM shutdowns, all its files are
        deleted.  <vm_name> can be name or id of a VM.

        When the administrator  shutdowns  VMs  owned  by other users,  he
        should specify them by their IDs.

        $ #{CMD_NAME} shutdown vm00-nii

    delete <vm_name>
        Delete  the specified VM.  It  stops and unregisters  the VM  from
        RENKEI-VPE.  Information about accounting still remains on the DB.
        This command should be used only when the status of VM is 'unknown'.

        When the administrator deletes VMs owned by other users, he should
        specify them by their IDs.

        $ #{CMD_NAME} delete vm00-nii

    restart <vm_name>
        Restart the specified VM.  This command  should be used only when
        the status of VM is 'unknown'.

        When the administrator restarts VMs owned by other users, he should
        specify them by their IDs.

        $ #{CMD_NAME} restart vm00-nii


    suspend <vm_name>
        Suspend the specified VM.  A suspended VM can be resumed. <vm_name>
        can be name or id of a VM.

        When the administrator suspends VMs owned by other users, he should
        specify them by their IDs.

        $ #{CMD_NAME} suspend vm00-nii

    resume <vm_name>
        Resume the specified suspended VM.  <vm_name> can be name or id of
        a VM.

        When the administrator resumes VMs owned by other users, he should
        specify them by their IDs.

        $ #{CMD_NAME} resume vm00-nii


    mark_save <vm_name> <image_name> [ <image_description> ]
        Mark a running VM  to be seved on its shutdown.  It just marks and
        do not actually saves the VM state as an OS image.

        <vm_name>           can be name or id of a VM.
        <image_name>        is name of saved image.
        <image_description> can be empty or a string that contains a simple
                            description of the saved image.

        When the administrator  calls  this command to VMs  owned by other
        users, he should specify them by their IDs and the owner of resultant
        OS images is the administrator.

        $ #{CMD_NAME} mark_save vm00-nii saved_vm00-nii
        $ #{CMD_NAME} mark_save vm00-nii saved_vm00-nii 'test'


    list [ -x ] [ -v ] [ all|mine|<user_name> ]
        List VMs.

        If one of all(a), mine(m) and <user_name> is given, it lists
           all(a)      : all VMs
           mine(m)     : user's VMs
           <user_name> : VMs belong to the user

        If none of them are specified, it assumes that 'mine' is specified.
        'all' and <user_name> can be specified only by the administrator.
        <user_name> can be name or id of a user.

    history <-x> <-v> <all|mine|user_name>
        List VMs including previously executed and finished ones.

        If one of all(a), mine(m) and <user_name> is specified, it lists
           all(a)      : all VMs
           mine(m)     : user's VMs
           <user_name> : VMs belong to the user

        If none of them are specified, it assumes that 'mine' is specified.
        'all' and <user_name> can be specified only by the administrator.
        <user_name> can be name or id of a user.


    show [ -x ] [ -v ] [ -V ] <vm_name> [ <vm_name> ... ]
        Show information about specified VMs.

        $ #{CMD_NAME} show vm00-nii
        $ #{CMD_NAME} show vm00-nii vm00-titech


    help
        Show this message.

Options
EOS

##############################################################################
# Global variables
##############################################################################
client        = RenkeiVPE::Client.new()
xml_output    = false
verbose       = false
super_verbose = false
list_columns  = {
  :id      => { :name => 'ID',
                :size => 4,
                :proc => lambda {|d,e| d.id} },
  :name    => { :name => 'NAME',
                :size => 30,
                :proc => lambda {|d,e| d.name} },
  :user    => { :name => 'USER',
                :size => 10,
                :proc => lambda {|d,e| d['USER_NAME']} },
  :zone    => { :name => 'ZONE',
                :size => 15,
                :proc => lambda {|d,e| d['ZONE_NAME']} },
  :time    => { :name => 'TIME',
                :size => 11,
                :proc => lambda {|d,e| str_running_time(d)} },
  :state   => { :name => 'STAT',
                :size => 4,
                :proc => lambda {|d,e| d.status} },

  :default => [:id, :name, :user, :zone, :time, :state]
}

##############################################################################
# Functions
##############################################################################
def str_running_time(data)
  stime=Time.at(data["STIME"].to_i)
  if data["ETIME"]=="0"
    etime=Time.now
  else
    etime=Time.at(data["ETIME"].to_i)
  end
  dtime=Time.at(etime-stime).getgm

  "%02d %02d:%02d:%02d" % [dtime.yday-1, dtime.hour, dtime.min, dtime.sec]
end

##############################################################################
# main
##############################################################################

begin
  parser = OptionParser.new
  parser.banner = CMD_HELP

  parser.on('-x', '--xml', ': xml output mode') do
    xml_output = true
  end

  parser.on('-v', ': verbose output mode') do
    verbose = true
  end

  parser.on('-V', ': super verbose output mode') do
    super_verbose = true
  end

  parser.on('-h', '--help', ': Show this message') do
    puts parser.help
    exit 0
  end

  parser.parse!(ARGV)
rescue OptionParser::ParseError => e
  exit_on_parse_error(e.message)
rescue => e
  exit_on_parse_error(e.message)
end

verbose ||= super_verbose

command = ARGV.shift
case command
#######################################
# create a VM
when 'create'
  check_command('create', 5)

  vmtype   = ARGV.shift
  # TODO to use id only for image is dirty
  image_id = get_image_id(ARGV.shift)
  key_file = ARGV.shift
  zone     = ARGV.shift
  networks = ARGV.join(ITEM_SEPARATOR)
  # read contents of key_file
  begin
    root_pubkey = File.read(key_file)
  rescue
    $stderr.puts "Can't read root ssh public key file: #{key_file}"
    exit 1
  end

  vm = RenkeiVPE::VirtualMachine.new(RenkeiVPE::VirtualMachine.build_xml,
                                     client)
  rc = vm.create(vmtype, image_id, root_pubkey, zone, networks)
  if RenkeiVPE.is_successful?(rc)
    puts "Request done: create VM[#{vm.name}]"
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# shutdown a VM
when 'shutdown'
  check_command('shutdown', 1)

  vm_name = ARGV[0]
  id = get_vm_id(vm_name)
  vm = RenkeiVPE::VirtualMachine.new_with_id(id, client)
  rc = vm.shutdown

  if RenkeiVPE.is_successful?(rc)
    puts "Request done: shutdown VM[#{vm_name}]"
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# delete a VM
when 'delete'
  check_command('delete', 1)

  vm_name = ARGV[0]
  id = get_vm_id(vm_name)
  vm = RenkeiVPE::VirtualMachine.new_with_id(id, client)
  rc = vm.delete

  if RenkeiVPE.is_successful?(rc)
    puts "Request done: delete VM[#{vm_name}]"
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# restart a VM
when 'restart'
  check_command('restart', 1)

  vm_name = ARGV[0]
  id = get_vm_id(vm_name)
  vm = RenkeiVPE::VirtualMachine.new_with_id(id, client)
  rc = vm.restart

  if RenkeiVPE.is_successful?(rc)
    puts "Request done: restart VM[#{vm_name}]"
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# subpend a VM
when 'suspend'
  check_command('suspend', 1)

  vm_name = ARGV[0]
  id = get_vm_id(vm_name)
  vm = RenkeiVPE::VirtualMachine.new_with_id(id, client)
  rc = vm.suspend

  if RenkeiVPE.is_successful?(rc)
    puts "Request done: suspend VM[#{vm_name}]"
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# resume a VM
when 'resume'
  check_command('resume', 1)

  vm_name = ARGV[0]
  id = get_vm_id(vm_name)
  vm = RenkeiVPE::VirtualMachine.new_with_id(id, client)
  rc = vm.resume

  if RenkeiVPE.is_successful?(rc)
    puts "Request done: resume VM[#{vm_name}]"
  else
    $stderr.puts rc.message
    exit 1
  end

##############################################
# mark a VM to save its OS image on shutdown
when 'mark_save'
  check_command('mark_save', 2)

  vm_name  = ARGV[0]
  img_name = ARGV[1]
  img_desc = (ARGV[2])? ARGV[2] : ''
  id = get_vm_id(vm_name)
  vm = RenkeiVPE::VirtualMachine.new_with_id(id, client)
  rc = vm.mark_save(img_name, img_desc)

  if RenkeiVPE.is_successful?(rc)
    puts "VM[#{vm_name}] is marked to save its image on shutdown."
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# show VM list
when 'list'
  filter = -1
  if ARGV.size == 1
    case ARGV[0]
    when 'all'
      filter = -2
    when 'a'
      filter = -2
    when 'mine'
      filter = -1
    when 'm'
      filter = -1
    else # name or id of a user
      filter = get_user_id(ARGV[0]).to_i
    end
  end

  vm_pool = RenkeiVPE::VirtualMachinePool.new(client, filter)
  rc = vm_pool.info
  if RenkeiVPE.is_error?(rc)
    $stderr.puts rc.message
    exit 1
  end

  if xml_output
    puts vm_pool.to_xml
  else
    print_xml_in_table(list_columns, vm_pool, verbose)
  end

#######################################
# show VM history
when 'history'
  filter = -1
  if ARGV.size == 1
    case ARGV[0]
    when 'all'
      filter = -2
    when 'a'
      filter = -2
    when 'mine'
      filter = -1
    when 'm'
      filter = -1
    else # name or id of a user
      filter = get_user_id(ARGV[0]).to_i
    end
  end

  vm_pool = RenkeiVPE::VirtualMachinePool.new(client, filter, 1)
  rc = vm_pool.info
  if RenkeiVPE.is_error?(rc)
    $stderr.puts rc.message
    exit 1
  end

  if xml_output
    puts vm_pool.to_xml
  else
    print_xml_in_table(list_columns, vm_pool, verbose)
  end

#######################################
# show VM info
when 'show'
  check_command('show', 1)

  ARGV.each do |vm_name|
    id = get_vm_id(vm_name)
    vm = RenkeiVPE::VirtualMachine.new_with_id(id, client)
    rc = vm.info

    if RenkeiVPE.is_successful?(rc)
      if xml_output
        puts vm.to_xml
      else
        str='%-15s: %-30s'

        # print VM information
        print_header('%-80s', 'VM INFORMATION', true)
        # print ID
        puts str % ['ID', vm.id.to_s]  if verbose
        # print Name
        puts str % ['NAME', vm.name]
        # print IP Address
        puts str % ['IP ADDRESS', vm['ADDRESS']]
        # print State
        puts str % ['STATE', vm.state_str]
        # print Zone ID
        puts str % ['ZONE ID', vm['ZONE_ID']] if verbose
        # print Zone Name
        puts str % ['ZONE', vm['ZONE_NAME']]
        # print Type ID
        puts str % ['VM TYPE ID', vm['TYPE_ID']] if verbose
        # print Type Name
        puts str % ['VM TYPE', vm['TYPE_NAME']]
        # print Image ID
        puts str % ['IMAGE ID', vm['IMAGE_ID']] if verbose
        # print Image Name
        puts str % ['IMAGE', vm['IMAGE_NAME']]
        # print VM network lease information
        leases = Array.new
        vm.each('LEASES/LEASE') do |lease|
          leases << lease
        end
        lhstr = 'HOSTNAME(ADDRESS)'
        lhstr = '[ID] ' + lhstr if verbose
        puts str % ['ADDRESS LEASES', lhstr]
        leases.each do |lease|
          lstr = lease['NAME'] + '(' + lease['ADDRESS'] + ')'
          lstr = '[' + lease['ID'] + '] ' + lstr if verbose
          puts str % ['', lstr]
        end
        puts

        # print VM user information
        print_header('%-80s', 'USER INFORMATION', false)
        # print User ID
        puts str % ['USER ID', vm['USER_ID']] if verbose
        # print User Name
        puts str % ['USER NAME', vm['USER_NAME']]
        # print Start Time
        value = vm['STIME'].to_i
        if value == 0
          value = '-'
        else
          value = Time.at(value).strftime("%m/%d %H:%M:%S")
        end
        puts str % ['START TIME', value]
        # print END Time
        value = vm['ETIME'].to_i
        if value == 0
          value = '-'
        else
          value = Time.at(value).strftime("%m/%d %H:%M:%S")
        end
        puts str % ['END TIME', value]
        puts str % ['RUNNING TIME', str_running_time(vm)]
        puts

        # print VM monitoring information
        print_header('%-80s', 'MONITORING INFORMATION', false)
        puts str % ['USED CPU', vm['CPU']]
        puts str % ['USED MEMORY', vm['MEMORY']]
        puts str % ['NET_TX', vm['NET_TX']]
        puts str % ['NET_RX', vm['NET_RX']]
        puts

        if super_verbose
          # print VM template
          print_header('%-80s', 'VIRTUAL MACHINE TEMPLATE', false)
          puts vm.template_str
        end
      end
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# show help
when 'help'
  puts parser.help

else
  exit_on_parse_error("Unknown command: #{command}")

end


### Local variables:
### mode: Ruby
### coding: utf-8-unix
### indent-tabs-mode: nil
### End:

#! /bin/env ruby
#
# Copyright 2011-2012 Shinichiro Takizawa
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


##############################################################################
# Environment Configuration
##############################################################################
RVPE_LOCATION = ENV['RVPE_LOCATION']

if !RVPE_LOCATION
  $stderr.puts 'set "RVPE_LOCATION" valiable.'
  exit 1
else
  RUBY_LIB_LOCATION = RVPE_LOCATION + '/lib'
end

$: << RUBY_LIB_LOCATION

##############################################################################
# Required libraries
##############################################################################
require 'renkei-vpe'
require 'client_utilities'
require 'optparse'

##############################################################################
# Global variables
##############################################################################
CMD_NAME = 'rvpevnet'

client = RenkeiVPE::Client.new()
xml_output = false
verbose    = false

list_columns = {
  :id      => { :name => 'ID',
                :size => 4,
                :proc => lambda {|d,e| d.id} },
  :name    => { :name => 'NAME',
                :size => 30,
                :proc => lambda {|d,e| d.name} },
  :zone    => { :name => 'ZONE',
                :size => 20,
                :proc => lambda {|d,e| d['ZONE']} },

  :default => [:id, :name, :zone]
}

##############################################################################
# Functions
##############################################################################
def send_servers_to_vnet(args, method, client)
  zone_name = args.shift
  vnet_name = args.shift
  servers   = args.join(' ')
  id = get_vn_id(vnet_name, zone_name)
  vnet = RenkeiVPE::VirtualNetwork.new_with_id(id, client)
  rc = vnet.send(method, servers)

  if is_successful?(rc)
    vn_uqname = "VirtualNetwork[#{zone_name}::#{vnet_name}]"
    servers_name = "Server[#{servers}]"
    yield(vn_uqname, servers_name)
  else
    $stderr.puts rc.message
    exit 1
  end
end

def send_lease_to_vnet(args, method, client)
  zone_name = args.shift
  vnet_name = args.shift
  id = get_vn_id(vnet_name, zone_name)
  vnet = RenkeiVPE::VirtualNetwork.new_with_id(id, client)
  rc = vnet.send(method, *args)

  if is_successful?(rc)
    vn_uqname = "VirtualNetwork[#{zone_name}::#{vnet_name}]"
    yield(vn_uqname, args)
  else
    $stderr.puts rc.message
    exit 1
  end
end

def add_servers(args, method, client)
  send_servers_to_vnet(args, method, client) do |vn_name, servers|
    puts "#{servers} added to #{vn_name}."
  end
end

def remove_servers(args, method, client)
  send_servers_to_vnet(args, method, client) do |vn_name, servers|
    puts "#{servers} removed from #{vn_name}."
  end
end

def add_lease(args, method, client)
  send_lease_to_vnet(args, method, client) do |vn_name, lease_info|
    lease = lease_info[0] + '(' + lease_info[1] + ')'
    puts "#{lease} added to #{vn_name}."
  end
end

def remove_lease(args, method, client)
  send_lease_to_vnet(args, method, client) do |vn_name, lease_info|
    puts "#{lease_info[0]} removed from #{vn_name}."
  end
end

def print_servers(xml_obj, server_name)
  str='%-15s: %-30s'

  list = xml_obj[server_name].split
  if list.size > 1
    puts str % [server_name + ' SERVERS', list.shift]
    list.each do |s|
      puts str % ['', s]
    end
  else
    puts str % [server_name + ' SERVER', list[0]]
  end
end

def print_leases(xml_obj, verbose=false, print_name_on_header=false)
  # print header
  print_header('%-80s',
               'VIRTUAL HOST LEASES' +
               ((print_name_on_header)? " - #{xml_obj.name}" : ''),
               true)

  # print header for leases
  if verbose
    str = '%4s %30s %15s %17s %4s %4s'
    hmsg = %w{ID NAME IP MAC USED VID}
  else
    str = '%30s %15s %17s'
    hmsg = %w{NAME IP MAC}
  end
  print_header(str, hmsg, true)
  xml_obj.each('LEASES/LEASE') do |l|
    name = l['NAME']
    if l['ASSIGNED_TO_UID'].to_i >= 0
      name = '(+) ' + name
    end
    if verbose
      msg = [ l['ID'], name, l['IP'], l['MAC'],
              l['USED'], l['VID'] ]
    else
      msg = [ name, l['IP'], l['MAC'] ]
    end
    puts str % msg
  end
end

def each_vnets_in_zone(args, client)
  zone_name = args.shift
  if args.empty?
    targets = get_vn_ids(zone_name)
  else
    targets = []
    args.each do |vnet_name|
      targets << get_vn_id(vnet_name, zone_name)
    end
  end

  targets.each do |id|
    vnet = RenkeiVPE::VirtualNetwork.new_with_id(id, client)
    rc = vnet.info
    if is_successful?(rc)
      yield vnet
    else
      $stderr.puts rc.message
      exit 1
    end
  end
end

def list_servers(args, type, client)
  each_vnets_in_zone(args, client) do |vnet|
    print_header('%-80s', "NETWORK - #{vnet.name}", true)
    print_servers(vnet, type)
  end
end

def list_leases(args, verbose, client)
  each_vnets_in_zone(args, client) do |vnet|
    print_leases(vnet, verbose, true)
  end
end

##############################################################################
# main
##############################################################################

begin
  parser = OptionParser.new
  parser.banner = <<EOT
Usage:
    #{CMD_NAME} command <options>

Commands:
    adddns zone_name vnet_name dns_server_names
        add dns servers referred by VMs that belong to the specified
        virtual network and run on hosts in the specified zone.
        dns_server_names can be names of dns servers.

        $ #{CMD_NAME} adddns 'tokyo tech' csi_grid  131.112.5.20

    removedns zone_name vnet_name dns_server_names
        remove dns servers referred by VMs that belong to the specified
        virtual network and run on hosts in the specified zone.
        dns_server_names can be names of dns servers.

        $ #{CMD_NAME} removedns 'tokyo tech' csi_grid 131.112.5.20

    listdns zone_name <vnet_names>
        list dns servers referred by VMs that belong to the specified
        virtual networks and run on hosts in the specified zone.
        vnet_names can be names of virtual networks. If vnet_names are
        not given, it lists dns servers in all virtual networks in the
        zone.

        $ #{CMD_NAME} listdns 'tokyo tech' csi_grid
        $ #{CMD_NAME} listdns 'tokyo tech' csi_grid 'campus net1'


    addntp zone_name vnet_name ntp_server_names
        add ntp servers referred by VMs that belong to the specified
        virtual network and run on hosts in the specified zone.
        ntp_server_names can be names of ntp servers.

        $ #{CMD_NAME} addntp 'tokyo tech' csi_grid 131.112.5.20

    removentp zone_name vnet_name ntp_server_names
        remove ntp servers referred by VMs that belong to the specified
        virtual network and run on hosts in the specified zone.
        ntp_server_names can be names of ntp servers.

        $ #{CMD_NAME} removentp 'tokyo tech' csi_grid 131.112.5.20

    listntp zone_name <vnet_names>
        list ntp servers referred by VMs that belong to the specified
        virtual networks and run on hosts in the specified zone.
        vnet_names can be names of virtual networks. If vnet_names are
        not given, it lists ntp servers in all virtual networks in the
        zone.

        $ #{CMD_NAME} listntp 'tokyo tech' csi_grid
        $ #{CMD_NAME} listntp 'tokyo tech' csi_grid 'campus net1'


    addlease zone_name vnet_name lease_name lease_address
        add a vm lease to the specified virtual network in the specified
        zone.

        $ #{CMD_NAME} addlease 'tokyo tech' csi_grid \\
        > vm00.titech.ac.jp 131.112.5.24

    removelease zone_name vnet_name lease_name
        remove a vm lease from the specified virtual network in the
        specified zone.

        $ #{CMD_NAME} removelease 'tokyo tech' csi_grid vm00.titech.ac.jp

    leases zone_name <vnet_names>
        list virtual host leases that belong to the specified virtual
        networks in the specified zone.
        vnet_names can be names of virtual networks. If vnet_names are
        not given, it lists all leases in all virtual networks in the
        zone.

        $ #{CMD_NAME} leases 'tokyo tech' csi_grid
        $ #{CMD_NAME} leases 'tokyo tech' csi_grid 'campus net1'


    show <-x> <-v> zone_name <vnet_names>
        show information about virtual networks under the specified zone.
        If vnet_names, which can be names of virtual networks, are given,
        show information about given VNs.

        $ #{CMD_NAME} show 'tokyo tech' csi_grid
        $ #{CMD_NAME} show 'tokyo tech' csi_grid 'campus net1'


    list <-x>
        list all virtual networks.
        This is a debug-purpose command for #{CMD_NAME}.


    help
        show this message.

Options:
EOT

  parser.on('-v', ': verbose output mode') do
    verbose = true
  end

  parser.on('-x', '--xml', ': xml output mode') do
    xml_output = true
  end

  parser.parse!(ARGV)
rescue OptionParser::ParseError
  $stderr.puts parser.help
  exit 1
rescue => e
  $stderr.puts e.message + "\n\n"
  $stderr.puts parser.help
  exit 1
end

command = ARGV.shift
case command
#######################################
# add dns servers
when 'adddns'
  check_parameters('adddns', 3)

  add_servers(ARGV, :adddns, client)

#######################################
# remove dns servers
when 'removedns'
  check_parameters('removedns', 3)

  remove_servers(ARGV, :rmdns, client)

#######################################
# list dns servers
when 'listdns'
  check_parameters('listdns', 1)

  list_servers(ARGV, 'DNS', client)
  puts

#######################################
# add ntp servers
when 'addntp'
  check_parameters('addntp', 3)

  add_servers(ARGV, :addntp, client)

#######################################
# remove ntp servers
when 'removentp'
  check_parameters('removentp', 3)

  remove_servers(ARGV, :rmntp, client)

#######################################
# list ntp servers
when 'listntp'
  check_parameters('listntp', 1)

  list_servers(ARGV, 'NTP', client)
  puts

#######################################
# add a virtual host lease
when 'addlease'
  check_parameters('addlease', 4)

  add_lease(ARGV, :addlease, client)

#######################################
# remove a virtual host lease
when 'removelease'
  check_parameters('removelease', 3)

  remove_lease(ARGV, :rmlease, client)

#######################################
# list virtual host leases
when 'leases'
  check_parameters('leases', 1)

  list_leases(ARGV, verbose, client)
  puts

#######################################
# show vns
when 'show'
  check_parameters('show', 1)

  each_vnets_in_zone(ARGV, client) do |vnet|
    if xml_output
      puts vnet.to_xml
    else
      str="%-15s: %-30s"

      # print header
      print_header("%-80s", "VIRTUAL NETWORK INFORMATION", true)

      # print ID
      puts str % ['ID', vnet.id.to_s]   if verbose
      # print Name
      if verbose
        puts str % ['NAME', vnet.name]
        puts str % ['ZONE NAME', vnet['ZONE']]
        puts str % ['UNIQUE NAME', vnet['UNIQUE_NAME']]
      else
        puts str % ['NAME', vnet['UNIQUE_NAME']]
      end
      puts str % ['DESCRIPTION', vnet['DESCRIPTION']]
      puts

      # print header
      print_header("%-80s", "NETWORK PARAMETERS", true)

      puts str % ['ADDRESS', vnet['ADDRESS']]
      puts str % ['NETMASK', vnet['NETMASK']]
      puts str % ['GATEWAY', vnet['GATEWAY']]
      # print dns
      print_servers(vnet, 'DNS')
      # print ntp
      print_servers(vnet, 'NTP')
      puts str % ['HOST IF', vnet['HOST_INTERFACE']] if verbose
      puts

      print_leases(vnet, verbose)
      puts; puts
    end
  end

#######################################
# list hosts
when 'list'
  vnet_pool = RenkeiVPE::VirtualNetworkPool.new(client)
  rc = vnet_pool.info
  if is_error?(rc)
    $stderr.puts rc.message
    exit 1
  end

  if xml_output
    puts vnet_pool.to_xml
  else
    print_xml_friendly(list_columns, vnet_pool, verbose)
  end

#######################################
# show help
when 'help'
  puts parser.help

else
  $stderr.puts "Unknown command: #{command}"
  $stderr.puts parser.help

end


### Local variables:
### mode: Ruby
### coding: utf-8-unix
### indent-tabs-mode: nil
### End:

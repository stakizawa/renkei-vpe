#! /bin/env ruby
#
# Copyright 2011-2012 Shinichiro Takizawa
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


##############################################################################
# Environment Configuration
##############################################################################
RVPE_LOCATION = ENV['RVPE_LOCATION']

if !RVPE_LOCATION
  $stderr.puts 'set "RVPE_LOCATION" valiable.'
  exit 1
else
  RUBY_LIB_LOCATION = RVPE_LOCATION + '/lib'
end

$: << RUBY_LIB_LOCATION

##############################################################################
# Required libraries
##############################################################################
require 'renkei-vpe'
require 'renkei-vpe-tool/cli-utilities'
require 'optparse'

include RenkeiVPETool::CliUtilities

##############################################################################
# Constant variables
##############################################################################
CMD_NAME = 'rvpeimage'
CMD_HELP = <<EOS
Name
    #{CMD_NAME} - manipulate OS images on RENKEI-VPE

Synopsis
    #{CMD_NAME} <command> [ options ]

Description
    This command  manipulates  OS images on RENKEI-VPE.  The function this
    command  offers are  register/unregister/export  OS images, publish/
    unpublish and make persistent/nonpersistent them.  It also provides  a
    way to modify the description of OS images, show and list them.

    The <command> is a name of a subcommand of #{CMD_NAME} command.

Commands
    import <definition_file>
        Import an OS image to the system whose context is defined in
        <definition_file>.

        $ #{CMD_NAME} import centos.dsk

    export <image_name> <file_name>
        Export an OS image named <image_name> to a file named <file_name>.
        It generates one directory containing two files.  The directory is
        created with  <file_name> name.  In the directory,  the following
        two files are stored.
          disk.img : disk image file
          attr.txt : a file contains attributes of the disk image

        $ #{CMD_NAME} export centos5.5_virtio centos5.5_backup

    delete <image_name> [ <image_name> ... ]
        Delete specified OS images.

        $ #{CMD_NAME} delete centos5.5_virtio
        $ #{CMD_NAME} delete centos5.5_virtio 'ttylinux sample'


    publish <image_name> [ <image_name> ... ]
        Publish specified OS images.

        $ #{CMD_NAME} publish centos5.5_virtio
        $ #{CMD_NAME} publish centos5.5_virtio 'ttylinux sample'

    unpublish
        Unpublish specified images.

        $ #{CMD_NAME} unpublish centos5.5_virtio
        $ #{CMD_NAME} unpublish centos5.5_virtio 'ttylinux sample'

    persistent <image_name> [ <image_name> ... ]
        Make specified OS images persistent.

        $ #{CMD_NAME} persistent centos5.5_virtio
        $ #{CMD_NAME} persistent centos5.5_virtio 'ttylinux sample'

    nonpersistent <image_name> [ <image_name> ... ]
        Make specified OS images nonpersistent.

        $ #{CMD_NAME} nonpersistent centos5.5_virtio
        $ #{CMD_NAME} nonpersistent centos5.5_virtio 'ttylinux sample'

    description <image_name> <new_description>
        Update description of the OS image.

        $ #{CMD_NAME} description centos5.5 'Updated CentOS 5.5 image'


    list [ -x ] [ -v]  [ all|mine|<user_name> ]
        List registered OS images.

        If one of all(a), mine(m) and <user_name> is given, it lists
           all(a)      : all public images and user's images
           mine(m)     : user's images
           <user_name> : images belong to the user

        If none of them are specified, it assumes that 'mine' is specified.
        'all' and <user_name> can be specified only by the administrator.
        <user_name> can be name or id of a user.

    show [ -x ] [ -v ] <image_name> [ <image_name> ... ]
        Show information about specified OS images.

        $ #{CMD_NAME} show centos5.5_virtio
        $ #{CMD_NAME} show centos5.5_virtio 'ttylinux sample'


    help
        Show this message.

Options
EOS

##############################################################################
# Global variables
##############################################################################
client = RenkeiVPE::Client.new()
xml_output = false
verbose    = false

##############################################################################
# Functions
##############################################################################
def expand_image_path(template)
  new_template = ''
  template.each_line do |l|
    if /^(\s*path\s*:\s*)(.+)$/i =~ l
      l = $1 + File.expand_path($2)
    end
    new_template += l
  end
  new_template
end

##############################################################################
# main
##############################################################################

begin
  parser = OptionParser.new
  parser.banner = CMD_HELP

  parser.on('-x', '--xml', ': xml output mode') do
    xml_output = true
  end

  parser.on('-v', ': verbose output mode') do
    verbose = true
  end

  parser.on('-h', '--help', ': Show this message') do
    puts parser.help
    exit 0
  end

  parser.parse!(ARGV)
rescue OptionParser::ParseError => e
  exit_on_parse_error(e.message)
rescue => e
  exit_on_parse_error(e.message)
end

command = ARGV.shift
case command
#######################################
# import an image to the system
when 'import'
  check_command('import', 1)
  begin
    template = expand_image_path(File.read(ARGV[0]))
  rescue
    $stderr.puts "Error: Can't read definition file: #{ARGV[0]}"
    exit 1
  end

  image = RenkeiVPE::Image.new(RenkeiVPE::Image.build_xml, client)
  rc = image.register(template)
  if RenkeiVPE.is_successful?(rc)
    puts "Image[#{image.name}] is created."
  else
    $stderr.puts 'Error: ' + rc.message
    exit 1
  end

#######################################
# export an image
when 'export'
  check_command('export', 2)
  img_name = ARGV[0]
  out_name = ARGV[1]

  if FileTest.exist?(out_name)
    $stderr.puts "File[#{out_name}] exists."
    exit 1
  end

  id = get_image_id(img_name)
  image = RenkeiVPE::Image.new_with_id(id, client)
  rc = image.export(out_name)
  if RenkeiVPE.is_successful?(rc)
    puts "Image[#{img_name}] is exported to File[#{out_name}]."
  else
    $stderr.puts 'Error: ' + rc.message
    exit 1
  end

#######################################
# delete an image
when 'delete'
  check_command('delete', 1)

  ARGV.each do |img_name|
    id = get_image_id(img_name)
    image = RenkeiVPE::Image.new_with_id(id, client)
    rc = image.unregister
    if RenkeiVPE.is_successful?(rc)
      puts "Image[#{image.name}] is deleted."
    else
      $stderr.puts 'Error: ' + rc.message
      exit 1
    end
  end

#######################################
# publish an image
when 'publish'
  check_command('publish', 1)

  ARGV.each do |img_name|
    id = get_image_id(img_name)
    image = RenkeiVPE::Image.new_with_id(id, client)
    rc = image.publish
    if RenkeiVPE.is_successful?(rc)
      puts "Image[#{img_name}] is published."
    else
      $stderr.puts 'Error: ' + rc.message
      exit 1
    end
  end

#######################################
# unpublish an image
when 'unpublish'
  check_command('unpublish', 1)

  ARGV.each do |img_name|
    id = get_image_id(img_name)
    image = RenkeiVPE::Image.new_with_id(id, client)
    rc = image.unpublish
    if RenkeiVPE.is_successful?(rc)
      puts "Image[#{img_name}] is unpublished."
    else
      $stderr.puts 'Error: ' + rc.message
      exit 1
    end
  end

#######################################
# make an image persistent
when 'persistent'
  check_command('persistent', 1)

  ARGV.each do |img_name|
    id = get_image_id(img_name)
    image = RenkeiVPE::Image.new_with_id(id, client)
    rc = image.persistent
    if RenkeiVPE.is_successful?(rc)
      puts "Image[#{img_name}] is persistent."
    else
      $stderr.puts 'Error: ' + rc.message
      exit 1
    end
  end

#######################################
# make an image nonpersistent
when 'nonpersistent'
  check_command('nonpersistent', 1)

  ARGV.each do |img_name|
    id = get_image_id(img_name)
    image = RenkeiVPE::Image.new_with_id(id, client)
    rc = image.nonpersistent
    if RenkeiVPE.is_successful?(rc)
      puts "Image[#{img_name}] is nonpersistent."
    else
      $stderr.puts 'Error: ' + rc.message
      exit 1
    end
  end

#######################################
# update description of an image
when 'description'
  check_command('description', 2)

  img_name = ARGV.shift
  new_desc = ARGV.shift
  id = get_image_id(img_name)
  image = RenkeiVPE::Image.new_with_id(id, client)
  rc = image.description(new_desc)
  if RenkeiVPE.is_successful?(rc)
    puts "Description Image[#{img_name}] is updated."
  else
    $stderr.puts 'Error: ' + rc.message
    exit 1
  end

#######################################
# show image list
when 'list'
  filter = -1
  if ARGV.size == 1
    case ARGV[0]
    when 'all'
      filter = -2
    when 'a'
      filter = -2
    when 'mine'
      filter = -1
    when 'm'
      filter = -1
    else # name or id of a user
      filter = get_user_id(ARGV[0]).to_i
    end
  end

  img_pool = RenkeiVPE::ImagePool.new(client, filter)
  rc = img_pool.info
  if RenkeiVPE.is_error?(rc)
    $stderr.puts 'Error: ' + rc.message
    exit 1
  end

  if xml_output
    puts img_pool.to_xml
  else
    list_columns = {
      :id      => { :name => 'ID',
                    :size => 4,
                    :proc => lambda {|d,e| d.id} },
      :user    => { :name => 'OWNER',
                    :size => 10,
                    :proc => lambda {|d,e| d["USERNAME"]} },
      :name    => { :name => 'NAME',
                    :size => 30,
                    :proc => lambda {|d,e|
                      if d["PUBLIC"].to_i == 1 then d.name
                      elsif d["PERSISTENT"].to_i == 1 then "* " + d.name
                      else "- " + d.name end} },
      :regtime => { :name => 'REGTIME',
                    :size => 20,
                    :proc => lambda {|d,e|
                      regtime = Time.at(d["REGTIME"].to_i).getgm
                      regtime.strftime("%b %d, %Y %H:%M")} },
      :state   => { :name => 'STAT',
                    :size => 4,
                    :proc => lambda {|d,e| d.short_state_str} },
      :default => [:id, :user, :name, :regtime, :state]
    }
    print_xml_in_table(list_columns, img_pool, verbose)
  end

#######################################
# show image info
when 'show'
  check_command('show', 1)

  ARGV.each do |img_name|
    id = get_image_id(img_name)
    image = RenkeiVPE::Image.new_with_id(id, client)
    rc = image.info

    if RenkeiVPE.is_successful?(rc)
      if xml_output
        puts image.to_xml
      else
        str="%-15s: %-30s"

        # print header
        print_header("%-80s", "IMAGE INFORMATION", true)

        # print ID
        puts str % ["ID", image.id.to_s]  if verbose
        # print Name
        puts str % ["NAME", image.name]
        # print Description
        puts str % ['DESCRIPTION', image.get_template_value('DESCRIPTION')]
        # print Disk IO BUS
        puts str % ['DISK IO BUS', image.get_template_value('BUS')]
        # print NIC Model
        puts str % ['NIC MODEL', image.get_template_value('NIC_MODEL')]
        puts

        # print Register time
        value = image['REGTIME'].to_i
        if value == 0
          value = '-'
        else
          value = Time.at(value).strftime("%m/%d %H:%M:%S")
        end
        puts str % ["REGISTER TIME", value]
        # print Image size
        puts str % ["SIZE", image['SIZE']]
        # print Public flag
        if image['PUBLIC'].to_i == 1
          public_str = "Yes"
        else
          public_str = "No"
        end
        puts str % ["PUBLIC", public_str]
        # print Persistent flag
        if image['PERSISTENT'].to_i == 1
          persistent_str = "Yes"
        else
          persistent_str = "No"
        end
        puts str % ["PERSISTENT", persistent_str]
        # print State
        puts str % ["STATE", image.super_state_str]
      end
    else
      $stderr.puts 'Error: ' + rc.message
      exit 1
    end
  end

#######################################
# show help
when 'help'
  puts parser.help

else
  exit_on_parse_error("Unknown command: #{command}")

end


### Local variables:
### mode: Ruby
### coding: utf-8-unix
### indent-tabs-mode: nil
### End:

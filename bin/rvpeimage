#! /bin/env ruby

##############################################################################
# Environment Configuration
##############################################################################
RVPE_LOCATION = ENV['RVPE_LOCATION']

if !RVPE_LOCATION
  $stderr.puts 'set "RVPE_LOCATION" valiable.'
  exit 1
else
  RUBY_LIB_LOCATION = RVPE_LOCATION + '/lib'
end

$: << RUBY_LIB_LOCATION

##############################################################################
# Required libraries
##############################################################################
require 'renkei-vpe'
require 'client_utilities'
require 'fileutils'
require 'optparse'

##############################################################################
# Global variables
##############################################################################
CMD_NAME = 'rvpeimage'

client = RenkeiVPE::Client.new()
xml_output = false
verbose    = false
list_columns = {
  :id      => { :name => 'ID',
                :size => 4,
                :proc => lambda {|d,e| d.id} },
  :user    => { :name => 'OWNER',
                :size => 10,
                :proc => lambda {|d,e| d["USERNAME"]} },
  :name    => { :name => 'NAME',
                :size => 30,
                :proc => lambda {|d,e|
                           if d["PUBLIC"].to_i == 1 then d.name
                           else "- " + d.name end} },
  :regtime => { :name => 'REGTIME',
                :size => 20,
                :proc => lambda {|d,e| str_register_time(d)} },
  :state   => { :name => 'STAT',
                :size => 4,
                :proc => lambda {|d,e| d.short_state_str} },

  :default => [:id, :user, :name, :regtime, :state]
}

##############################################################################
# main
##############################################################################

begin
  parser = OptionParser.new
  parser.banner = <<EOT
Usage:
    #{CMD_NAME} command <options>

Commands:
    import definition_file
        import an image to the system which is defined in definition_file.

        $ #{CMD_NAME} import centos.dsk

    export image_name file_name
        export an image named image_name to a file named file_name.
        If file_name file is a directory, it outputs a file under the
        directorynamed named 'file_name/image_name'.

        $ #{CMD_NAME} export centos5.5_virtio centos.img

    delete image_names
        delete specified images. image_names can be names of images.

        $ #{CMD_NAME} delete centos5.5_virtio
        $ #{CMD_NAME} delete centos5.5_virtio 'ttylinux sample'


    publish image_names
        publish specified images. image_names can be names of images.

        $ #{CMD_NAME} publish centos5.5_virtio
        $ #{CMD_NAME} publish centos5.5_virtio 'ttylinux sample'

    unpublish image_names
        unpublish specified images. image_names can be names of images.

        $ #{CMD_NAME} unpublish centos5.5_virtio
        $ #{CMD_NAME} unpublish centos5.5_virtio 'ttylinux sample'


    list <-x> <-v> <all|mine|user_name>
        list registered images you can use.
        If one of all(a), mine(m) and user_name is specified, it lists,
           all(a)    : all public images and user's images
           mine(m)   : user's images
           user_name : images belong to the user

        If none of them are specified, it assumes that 'mine' is specified.
        'all' and user_name can be specified only by the administrator.
        'user_name' can be name or id of a user.

    show <-x> <-v> image_names
        show information about specified images. image_names can be names
        of images.

        $ #{CMD_NAME} show centos5.5_virtio
        $ #{CMD_NAME} show centos5.5_virtio 'ttylinux sample'


    help
        show this message.

Options:
EOT

  parser.on('-x', '--xml', ': xml output mode') do
    xml_output = true
  end

  parser.on('-v', ': verbose output mode') do
    verbose = true
  end

  parser.parse!(ARGV)
rescue OptionParser::ParseError
  $stderr.puts parser.help
  exit 1
rescue => e
  $stderr.puts e.message + "\n\n"
  $stderr.puts parser.help
  exit 1
end

command = ARGV.shift
case command
#######################################
# import an image to the system
when 'import'
  check_parameters('import', 1)
  begin
    template = File.read(ARGV[0])
  rescue
    $stderr.puts "Can't read definition file: #{ARGV[0]}"
    exit 1
  end

  image = RenkeiVPE::Image.new(RenkeiVPE::Image.build_xml, client)
  rc = image.register(template)
  if is_successful?(rc)
    puts "NAME: " + image.name
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# export an image
when 'export'
  check_parameters('export', 2)
  img_name = ARGV[0]
  out_name = ARGV[1]

  id = get_image_id(img_name)
  image = RenkeiVPE::Image.new_with_id(id, client)
  rc = image.info

  if is_successful?(rc)
    # decide output file name
    if FileTest.exist?(out_name)
      if FileTest.directory?(out_name)
        out_name += '/' + image['NAME'].gsub(/\s+/, '_')
      else
        $stderr.puts "File exists: #{out_name}"
        exit 1
      end
    end

    FileUtils.cp(image['SOURCE'], out_name)
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# delete an image
when 'delete'
  check_parameters('delete', 1)

  ARGV.each do |img_name|
    id = get_image_id(img_name)
    image = RenkeiVPE::Image.new_with_id(id, client)
    rc = image.unregister
    if is_successful?(rc)
      puts "Image deleted: #{image.name}"
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# publish an image
when 'publish'
  check_parameters('publish', 1)

  ARGV.each do |img_name|
    id = get_image_id(img_name)
    image = RenkeiVPE::Image.new_with_id(id, client)
    rc = image.publish
    if is_successful?(rc)
      puts "Image published"
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# unpublish an image
when 'unpublish'
  check_parameters('unpublish', 1)

  ARGV.each do |img_name|
    id = get_image_id(img_name)
    image = RenkeiVPE::Image.new_with_id(id, client)
    rc = image.unpublish
    if is_successful?(rc)
      puts "Image unpublished"
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# show image list
when 'list'
  filter = -1
  if ARGV.size == 1
    case ARGV[0]
    when 'all'
      filter = -2
    when 'a'
      filter = -2
    when 'mine'
      filter = -1
    when 'm'
      filter = -1
    else # name or id of a user
      filter = get_user_id(ARGV[0])
    end
  end

  img_pool = RenkeiVPE::ImagePool.new(client, filter)
  rc = img_pool.info
  if is_error?(rc)
    $stderr.puts rc.message
    exit 1
  end

  if xml_output
    puts img_pool.to_xml
  else
    print_xml_friendly(list_columns, img_pool, verbose)
  end

#######################################
# show image info
when 'show'
  check_parameters('show', 1)

  ARGV.each do |img_name|
    id = get_image_id(img_name)
    image = RenkeiVPE::Image.new_with_id(id, client)
    rc = image.info

    if is_successful?(rc)
      if xml_output
        puts image.to_xml
      else
        str="%-15s: %-30s"

        # print header
        print_header("%-80s", "IMAGE INFORMATION", true)

        # print ID
        puts str % ["ID", image.id.to_s]  if verbose
        # print Name
        puts str % ["NAME", image.name]
        # print Register time
        value = image['REGTIME'].to_i
        if value == 0
          value = '-'
        else
          value = Time.at(value).strftime("%m/%d %H:%M:%S")
        end
        puts str % ["REGISTER TIME", value]
        # print Public flag
        if image['PUBLIC'].to_i == 1
          public_str = "Yes"
        else
          public_str = "No"
        end
        puts str % ["PUBLIC", public_str]
        # print State
        puts str % ["STATE", image.state_str]
        # print Description
        image.template_str.each_line do |line|
          if /^(DESCRIPTION)\s*=\s*(.+)/ =~ line
            puts str % [$1, $2]
          end
        end
      end
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# show help
when 'help'
  puts parser.help

else
  $stderr.puts "Unknown command: #{command}"
  $stderr.puts parser.help

end


### Local variables:
### mode: Ruby
### coding: utf-8-unix
### indent-tabs-mode: nil
### End:

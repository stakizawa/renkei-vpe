#! /bin/env ruby
#
# Copyright 2011-2012 Shinichiro Takizawa
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


##############################################################################
# Environment Configuration
##############################################################################
RVPE_LOCATION = ENV['RVPE_LOCATION']

if !RVPE_LOCATION
  $stderr.puts 'set "RVPE_LOCATION" valiable.'
  exit 1
else
  RUBY_LIB_LOCATION = RVPE_LOCATION + '/lib'
end

$: << RUBY_LIB_LOCATION

##############################################################################
# Required libraries
##############################################################################
require 'renkei-vpe'
require 'client_utilities'
require 'optparse'

##############################################################################
# Global variables
##############################################################################
CMD_NAME = 'rvpehost'

client = RenkeiVPE::Client.new()
xml_output = false
verbose    = false

list_columns = {
  :id      => { :name => 'ID',
                :size => 4,
                :proc => lambda {|d,e| d.id} },
  :name    => { :name => 'NAME',
                :size => 30,
                :proc => lambda {|d,e| d.name} },
  :zone    => { :name => 'ZONE',
                :size => 20,
                :proc => lambda {|d,e| d['CLUSTER']} },
  :state   => { :name => 'STATE',
                :size => 15,
                :proc => lambda {|d,e| d.state_str} },

  :default => [:id, :name, :zone, :state]
}

##############################################################################
# main
##############################################################################

begin
  parser = OptionParser.new
  parser.banner = <<EOT
Usage:
    #{CMD_NAME} command <options>

Commands:
    enable zone_name host_names
        enable hosts. An enabled host can run VMs on it. host_names can
        be names of hosts.

        $ #{CMD_NAME} enable 'tokyo tech' rpop-titech.cc.titech.ac.jp

    disable zone_name host_names
        disable hosts. A disabled host can not run VMs. host_names can
        be names of hosts.

        $ #{CMD_NAME} disable 'tokyo tech' rpop-titech.cc.titech.ac.jp


    show <-v> <-x> zone_name <host_names>
        show information abount specified hosts in the specified zone.
        If host_names, which can be names of hosts, are given, it shows
        information about given hosts.

        $ #{CMD_NAME} show 'tokyo tech' rpop-titech.cc.titech.ac.jp


    list <-x>
        list all hosts that run VMs on them.
        This is a debug-purpose command for #{CMD_NAME}.


    help
        show this message.

Options:
EOT

  parser.on('-x', '--xml', ': xml output mode') do
    xml_output = true
  end

  parser.on('-v', ': verbose output mode') do
    verbose = true
  end

  parser.parse!(ARGV)
rescue OptionParser::ParseError
  $stderr.puts parser.help
  exit 1
rescue => e
  $stderr.puts e.message + "\n\n"
  $stderr.puts parser.help
  exit 1
end

command = ARGV.shift
case command
#######################################
# enable hosts
when 'enable'
  check_parameters('enable', 2)

  zone_name = ARGV.shift
  ARGV.each do |host_name|
    id = get_host_id(host_name, zone_name)
    host = RenkeiVPE::Host.new_with_id(id, client)
    rc = host.enable
    if is_successful?(rc)
      puts "Host[#{host_name}] enabled."
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# disable hosts
when 'disable'
  check_parameters('disable', 2)

  zone_name = ARGV.shift
  ARGV.each do |host_name|
    id = get_host_id(host_name, zone_name)
    host = RenkeiVPE::Host.new_with_id(id, client)
    rc = host.disable
    if is_successful?(rc)
      puts "Host[#{host_name}] disabled."
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# show hosts
when 'show'
  check_parameters('show', 1)

  zone_name = ARGV.shift

  if ARGV.empty?
    targets = get_host_ids(zone_name)
  else
    targets = []
    ARGV.each do |host_name|
      targets << get_host_id(host_name, zone_name)
    end
  end

  targets.each do |id|
    host = RenkeiVPE::Host.new_with_id(id, client)
    rc = host.info

    if is_successful?(rc)
      if xml_output
        puts host.to_xml
      else
        str    = "%-22s: %-20s"
        str_h1 = "%-80s"

        print_header(str_h1, "HOST INFORMATION", true)

        puts str % ["ID", host.id.to_s]       if verbose
        puts str % ["NAME", host.name]
        puts str % ["ZONE", host['CLUSTER']]
        puts str % ["STATE", host.state_str]
        puts str % ["IM_MAD", host['IM_MAD']] if verbose
        puts str % ["VM_MAD", host['VM_MAD']] if verbose
        puts str % ["TM_MAD", host['TM_MAD']] if verbose
        puts

        print_header(str_h1, "HOST SHARES", false)

        puts str % ["MAX MEM", host['HOST_SHARE/MAX_MEM']]
        puts str % ["USED MEM (REAL)", host['HOST_SHARE/USED_MEM']]
        puts str % ["USED MEM (ALLOCATED)", host['HOST_SHARE/MEM_USAGE']]
        puts str % ["MAX CPU", host['HOST_SHARE/MAX_CPU']]
        puts str % ["USED CPU (REAL)", host['HOST_SHARE/USED_CPU']]
        puts str % ["USED CPU (ALLOCATED)", host['HOST_SHARE/CPU_USAGE']]
        puts str % ["RUNNING VMS", host['HOST_SHARE/RUNNING_VMS']]

        if verbose
          puts
          print_header(str_h1, "MONITORING INFORMATION", false)
          puts host.template_str
        end

        puts; puts
      end
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# list hosts
when 'list'
  host_pool = RenkeiVPE::HostPool.new(client)
  rc = host_pool.info
  if is_error?(rc)
    $stderr.puts rc.message
    exit 1
  end

  if xml_output
    puts host_pool.to_xml
  else
    print_xml_friendly(list_columns, host_pool, verbose)
  end

#######################################
# show help
when 'help'
  puts parser.help

else
  $stderr.puts "Unknown command: #{command}"
  $stderr.puts parser.help

end


### Local variables:
### mode: Ruby
### coding: utf-8-unix
### indent-tabs-mode: nil
### End:

#! /bin/env ruby
#
# Copyright 2011-2012 Shinichiro Takizawa
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


##############################################################################
# Environment Configuration
##############################################################################
RVPE_LOCATION = ENV['RVPE_LOCATION']

if !RVPE_LOCATION
  $stderr.puts 'set "RVPE_LOCATION" valiable.'
  exit 1
else
  RUBY_LIB_LOCATION = RVPE_LOCATION + '/lib'
end

$: << RUBY_LIB_LOCATION

##############################################################################
# Required libraries
##############################################################################
require 'renkei-vpe'
require 'renkei-vpe-tool/cli-utilities'
require 'optparse'

include RenkeiVPETool::CliUtilities

##############################################################################
# Constant variables
##############################################################################
CMD_NAME = 'rvpelease'
CMD_HELP = <<EOS
NAME
    #{CMD_NAME} - manage the assignment of IP address

Synopsis
    #{CMD_NAME} <command> [ options ]

Description
    This command manages and shows assignments of IP address to users.  The
    administrator can assing/release IP addresses to/from users.  The user
    can just see his/her IP address assginment.

    The <command> is a name of a subcommand of #{CMD_NAME} command.

    In the following command explanation, I use the word 'lease' that means
    IP address assignment.  A 'lease' has two important attributes; 1) name
    of lease that equals to DNS hostname,  and 2) IP address that mapped to
    the hostname.

Commands
    assign <lease_name> <user_name>
        Assign a lease whose name is <lease_name>  to a user whose name is
        <user_name>.
        Only the administrator can execute this command.

        $ #{CMD_NAME} assign vm00.cc.titech.ac.jp user1

    release <lease_name>
        Release a lease whose name is <lease_name> from the assigned user.
        Only the administrator can execute this command.

        $ #{CMD_NAME} release vm00.cc.titech.ac.jp


    show [ -v ] [ -x ] <lease_name> [ <lease_name> ... ]
        Show information abount leases.

        $ #{CMD_NAME} show vm00.cc.titech.ac.jp
        $ #{CMD_NAME} show vm00.cc.titech.ac.jp vm01.cc.titech.ac.jp


    list [ -v ] [ -x ] [ all|mine|<user_name> ]
        List leases.

        If one of all(a), mine(m) and <user_name> is given, it lists
           all(a)      : all leases
           mine(m)     : leases assgined to a user who runs this command
                         and ones that have not been assigned
           <user_name> : leases assgined to the specified user

        If none of them are specified, it assumes that 'mine' is specified.
        'all' and <user_name> can be specified only by the administrator.
        <user_name> can be name or id of a user.


    help
        Show this message.

Options
EOS

##############################################################################
# Global variables
##############################################################################
client = RenkeiVPE::Client.new()
xml_output = false
verbose    = false

##############################################################################
# main
##############################################################################

begin
  parser = OptionParser.new
  parser.banner = CMD_HELP

  parser.on('-x', '--xml', ': xml output mode') do
    xml_output = true
  end

  parser.on('-v', ': verbose output mode') do
    verbose = true
  end

  parser.on('-h', '--help', ': Show this message') do
    puts parser.help
    exit 0
  end

  parser.parse!(ARGV)
rescue OptionParser::ParseError => e
  exit_on_parse_error(e.message)
rescue => e
  exit_on_parse_error(e.message)
end

command = ARGV.shift
case command
#######################################
# assign a lease to a user
when 'assign'
  check_command('assign', 2)

  lease_name = ARGV[0]
  user_name  = ARGV[1]
  id = get_lease_id(lease_name)
  lease = RenkeiVPE::Lease.new_with_id(id, client)
  rc = lease.assign(user_name)
  if RenkeiVPE.is_successful?(rc)
    puts "Lease[#{lease_name}] is assigned to User[#{user_name}]."
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# release a lease from a user
when 'release'
  check_command('release', 1)

  lease_name = ARGV[0]
  id = get_lease_id(lease_name)
  lease = RenkeiVPE::Lease.new_with_id(id, client)
  rc = lease.release
  if RenkeiVPE.is_successful?(rc)
    puts "Lease[#{lease_name}] is released."
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# show leases
when 'show'
  check_command('show', 1)

  ARGV.each do |lease_name|
    id = get_lease_id(lease_name)
    lease = RenkeiVPE::Lease.new_with_id(id, client)
    rc = lease.info

    if RenkeiVPE.is_successful?(rc)
      if xml_output
        puts lease.to_xml
      else
        str    = '%-22s: %-20s'
        str_h1 = '%-80s'

        print_header(str_h1, 'LEASE INFORMATION', true)

        puts str % ['ID', lease.id.to_s]       if verbose
        puts str % ['NAME', lease.name]
        puts str % ['IP ADDRESS', lease['IP']]
        puts str % ['MAC ADDRESS', lease['MAC']]
        puts str % ['ASSIGNED USER', lease.assigned_user]
        # print used
        if lease['USED'].to_i == 1
          used_str = 'Yes'
        else
          used_str = 'No'
        end
        puts str % ['USED', used_str]
        puts str % ['USING VM ID', lease.vm_id_str]

        puts
      end
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# list leases
when 'list'
  filter = -1
  if ARGV.size == 1
    case ARGV[0]
    when 'all'
      filter = -2
    when 'a'
      filter = -2
    when 'mine'
      filter = -1
    when 'm'
      filter = -1
    else # name or id of a user
      filter = get_user_id(ARGV[0])
    end
  end

  lease_pool = RenkeiVPE::LeasePool.new(client, filter)
  rc = lease_pool.info
  if RenkeiVPE.is_error?(rc)
    $stderr.puts rc.message
    exit 1
  end

  if xml_output
    puts lease_pool.to_xml
  else
    list_columns = {
      :id      => { :name => 'ID',
                    :size => 4,
                    :proc => lambda {|d,e| d.id} },
      :name    => { :name => 'NAME',
                    :size => 30,
                    :proc => lambda {|d,e| d.name} },
      :ip      => { :name => 'IP',
                    :size => 15,
                    :proc => lambda {|d,e| d['IP']} },
      :assign  => { :name => 'ASSIGN',
                    :size => 10,
                    :proc => lambda {|d,e| d.assigned_user} },
      :vid     => { :name => 'VM_ID',
                    :size => 15,
                    :proc => lambda {|d,e| d.vm_id_str} },
      :default => [:id, :name, :ip, :assign, :vid]
    }
    print_xml_in_table(list_columns, lease_pool, verbose)
  end

#######################################
# show help
when 'help'
  puts parser.help

else
  exit_on_parse_error("Unknown command: #{command}")

end


### Local variables:
### mode: Ruby
### coding: utf-8-unix
### indent-tabs-mode: nil
### End:

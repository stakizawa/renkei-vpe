#! /bin/env ruby

##############################################################################
# Environment Configuration
##############################################################################
RVPE_LOCATION = ENV['RVPE_LOCATION']

if !RVPE_LOCATION
  $stderr.puts 'set "RVPE_LOCATION" valiable.'
  exit 1
else
  RUBY_LIB_LOCATION = RVPE_LOCATION + '/lib'
end

$: << RUBY_LIB_LOCATION

##############################################################################
# Required libraries
##############################################################################
require 'renkei-vpe'
require 'client_utilities'
require 'optparse'
require 'yaml'

##############################################################################
# Global variables
##############################################################################
CMD_NAME = 'rvpezone'

client = RenkeiVPE::Client.new()
xml_output = false
verbose    = false
list_columns = {
  :id      => { :name => 'ID',
                :size => 4,
                :proc => lambda {|d,e| d.id} },
  :name    => { :name => 'NAME',
                :size => 30,
                :proc => lambda {|d,e| d.name} },

  :default => [:id, :name]
}

##############################################################################
# Functions
##############################################################################
def print_xml_array(xml_obj,
                    header_str, target_xpath, msg_on_no_item,
                    print_name_on_header=false)
  msg = header_str + ((print_name_on_header)? " - #{xml_obj.name}" : '')
  print_header("%-80s", msg, true)
  if xml_obj.has_elements?(target_xpath)
    xml_obj.each(target_xpath) do |e|
      puts e.text
    end
  else
    puts msg_on_no_item
  end
end

def print_hosts(zone, print_zone_name=false)
  print_xml_array(zone, 'HOSTS', 'HOSTS/HOST/NAME', 'no hosts', print_zone_name)
end

def print_networks(zone, print_zone_name=false)
  print_xml_array(zone, 'NETWORKS', 'NETWORKS/NETWORK/NAME',
                  'no networks', print_zone_name)
end

##############################################################################
# main
##############################################################################

begin
  parser = OptionParser.new
  parser.banner = <<EOT
Usage:
    #{CMD_NAME} command <options>

Commands:
    create definition_file
        create a zone and register it into the system.

        $ #{CMD_NAME} create titech_site.vpe

    delete zone_name
        delete a zone from the system.

        $ #{CMD_NAME} delete 'tokyo tech'


    addhost zone_name host_names
        add specified hosts which run VMs to the specified zone.
        host_names can be names of hosts.

        $ #{CMD_NAME} addhost 'tokyo tech' rpop-titech.cc.titech.ac.jp

    removehost zone_name host_names
        remove specified hosts from the specified zone. host_names can be
        names of hosts.

        $ #{CMD_NAME} deletehost 'tokyo tech' rpop-titech.cc.titech.ac.jp

    listhost zone_name
        list hosts that belong to the specified zone whose name is
        zone_name.

        $ #{CMD_NAME} listhost 'tokyo tech'


    addvnet zone_name definition_file
        add a virtual network to the specified zone.

        $ #{CMD_NAME} addvnet 'tokyo tech' titech_vnet1.vpe

    removevnet zone_name vnet_names
        remove virtual networks from the specified zone. vnet_names can
        be names of virtual networks.

        $ #{CMD_NAME} removevnet 'tokyo tech' vnet1

    listvnet zone_name
        list virtual networks which blong to the specified zone.

        $ #{CMD_NAME} listvnet 'tokyo tech'


    sync
        synchronizes probes with remote hosts in all zones.


    list <-x>
        list registered zones you can use.

    show <-x> <-v> zone_names
        show information about specified zones. zone_names can be names
        of zones.

        $ #{CMD_NAME} show 'tokyo tech'
        $ #{CMD_NAME} show 'tokyo tech' nii


    help
        show this message.

Options:
EOT

  parser.on('-x', '--xml', ': xml output mode') do
    xml_output = true
  end

  parser.on('-v', ': verbose output mode') do
    verbose = true
  end

  parser.parse!(ARGV)
rescue OptionParser::ParseError
  $stderr.puts parser.help
  exit 1
rescue => e
  $stderr.puts e.message + "\n\n"
  $stderr.puts parser.help
  exit 1
end

command = ARGV.shift
case command
#######################################
# create a zone
when 'create'
  check_parameters('create', 1)
  begin
    definition = File.read(ARGV[0])
  rescue
    $stderr.puts "Can't read definition file: #{ARGV[0]}"
    exit 1
  end

  zone = RenkeiVPE::Zone.new(RenkeiVPE::Zone.build_xml, client)
  rc = zone.register(definition)
  if is_successful?(rc)
    puts "Zone created: #{zone.name}"
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# delete a zone
when 'delete'
  check_parameters('delete', 1)

  name = ARGV[0]
  id = get_zone_id(name)
  zone = RenkeiVPE::Zone.new_with_id(id, client)
  rc = zone.delete
  if is_successful?(rc)
    puts "ZONE deleted: " + name
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# add hosts
when 'addhost'
  check_parameters('addhost', 2)

  zone_name = ARGV.shift
  id = get_zone_id(zone_name)
  zone = RenkeiVPE::Zone.new_with_id(id, client)
  ARGV.each do |host_name|
    rc = zone.addhost(host_name)
    if is_successful?(rc)
      puts "HOST[#{host_name}] is added to ZONE[#{zone_name}]."
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# remove hosts
when 'removehost'
  check_parameters('removehost', 2)

  zone_name = ARGV.shift
  id = get_zone_id(zone_name)
  zone = RenkeiVPE::Zone.new_with_id(id, client)
  ARGV.each do |host_name|
    rc = zone.rmhost(host_name)
    if is_successful?(rc)
      puts "HOST[#{host_name}] is removed from ZONE[#{zone_name}]."
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# list hosts
when 'listhost'
  check_parameters('listhost', 1)

  zone_name = ARGV[0]
  id = get_zone_id(zone_name)
  zone = RenkeiVPE::Zone.new_with_id(id, client)
  rc = zone.info
  if is_successful?(rc)
    print_hosts(zone, true)
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# add a virtual network
when 'addvnet'
  check_parameters('addvnet', 2)

  zone_name = ARGV.shift
  id = get_zone_id(zone_name)
  zone = RenkeiVPE::Zone.new_with_id(id, client)
  ARGV.each do |vnet_file|
    begin
      vn_definition = File.read(ARGV[0])
    rescue
      $stderr.puts "Can't read definition file: #{vn_definition}"
      exit 1
    end

    rc = zone.addvnet(vn_definition)
    if is_successful?(rc)
      name = zone_name + '::' + YAML.load(vn_definition)['name']
      puts "VirtualNetwork[#{name}] is added to ZONE[#{zone_name}]."
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# remove virtual networks
when 'removevnet'
  check_parameters('removevnet', 2)

  zone_name = ARGV.shift
  id = get_zone_id(zone_name)
  zone = RenkeiVPE::Zone.new_with_id(id, client)
  ARGV.each do |vnet_name|
    rc = zone.rmvnet(vnet_name)
    if is_successful?(rc)
      puts "VirtualNetwork[#{vnet_name}] is removed from ZONE[#{zone_name}]."
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# list virtual networks
when 'listvnet'
  check_parameters('listvnet', 1)

  zone_name = ARGV[0]
  id = get_zone_id(zone_name)
  zone = RenkeiVPE::Zone.new_with_id(id, client)
  rc = zone.info
  if is_successful?(rc)
    print_networks(zone, true)
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# synchronize probes with remote hosts in all zones
when 'sync'
  check_parameters('sync', 0)

  zone = RenkeiVPE::Zone.new(RenkeiVPE::Zone.build_xml, client)
  rc = zone.sync
  if is_successful?(rc)
    puts 'Sync is done.'
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# list zones
when 'list'
  zone_pool = RenkeiVPE::ZonePool.new(client)
  rc = zone_pool.info
  if is_error?(rc)
    $stderr.puts rc.message
    exit 1
  end

  if xml_output
    puts zone_pool.to_xml
  else
    print_xml_friendly(list_columns, zone_pool, verbose)
  end

#######################################
# show zones
when 'show'
  check_parameters('show', 1)

  ARGV.each do |zone_name|
    id = get_zone_id(zone_name)
    zone = RenkeiVPE::Zone.new_with_id(id, client)
    rc = zone.info

    if is_successful?(rc)
      if xml_output
        puts zone.to_xml
      else
        str="%-15s: %-30s"

        # print header
        print_header("%-80s", "ZONE INFORMATION", true)

        # print ID
        puts str % ['ID', zone.id.to_s]   if verbose
        # print Name
        puts str % ['NAME', zone.name]
        puts
        # print Hosts
        print_hosts(zone)
        puts
        # print Networks
        print_networks(zone)

      end
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# show help
when 'help'
  puts parser.help

else
  $stderr.puts "Unknown command: #{command}"
  $stderr.puts parser.help

end


### Local variables:
### mode: Ruby
### coding: utf-8-unix
### indent-tabs-mode: nil
### End:

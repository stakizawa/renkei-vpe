#! /bin/env ruby

##############################################################################
# Environment Configuration
##############################################################################
RVPE_LOCATION = ENV['RVPE_LOCATION']

if !RVPE_LOCATION
  $stderr.puts 'set "RVPE_LOCATION" valiable.'
  exit 1
else
  RUBY_LIB_LOCATION = RVPE_LOCATION + '/lib'
end

$: << RUBY_LIB_LOCATION

##############################################################################
# Required libraries
##############################################################################
require 'renkei-vpe'
require 'client_utilities'
require 'optparse'

##############################################################################
# Global variables
##############################################################################
CMD_NAME = 'rvpeuser'

client = RenkeiVPE::Client.new()
xml_output = false

list_columns = {
  :id      => { :name => 'ID',
                :size => 4,
                :proc => lambda {|d,e| d.id} },
  :user    => { :name => 'USER',
                :size => 15,
                :left => true,
                :proc => lambda {|d,e| d["NAME"]} },

  :default => [:id, :user]
}

##############################################################################
# Functions
##############################################################################
def print_user(user, xml_output, verbose=false)
  if xml_output
    puts user.to_xml
  else
    str="%-15s: %-30s"

    # print header
    print_header("%-80s", "USER INFORMATION", true)

    # print ID
    puts str % ['ID', user.id.to_s]  if verbose
    # print Name
    puts str % ['NAME', user.name]
    # print Enable flag
    if user['ENABLED'].to_i == 1
      enable_str = 'Yes'
    else
      enable_str = 'No'
    end
    puts str % ['ENABLE', enable_str]
    # print VM_CNT
    puts str % ['LIMIT', user['VM_CNT']]
    # print Zones
    puts str % ['ZONE IDS', user['ZONE_IDS']]       if verbose
    zones = user['ZONE_NAMES'].split(RenkeiVPE::Const::ITEM_SEPARATOR)
    puts str % ['ZONES', zones.shift]
    zones.each do |zone|
      puts str % ['', zone]
    end
    # print Password
    puts str % ['PASSWORD HASH', user['PASSWORD']]  if verbose
  end
end

def check_if_integer?(obj)
  return true if obj.kind_of?(Integer)
  if obj.instance_of?(String)
    return true if /^-?[0123456789]+$/ =~ obj
  end
  return false
end

##############################################################################
# main
##############################################################################

begin
  parser = OptionParser.new
  parser.banner = <<EOT
Usage:
    #{CMD_NAME} command <options>

Notes:
    This command can be used only by administrator.

Commands:
    info
        show my information.

        $ #{CMD_NAME} info


    create user_name password <number>
        create a new user. If the third parameter 'number' is specified,
        the limit of the user is set as 'number'. If it is not specified,
        user limit is 1 by default.

        $ #{CMD_NAME} create user1 password1
        $ #{CMD_NAME} create user1 password1 10

    delete user_name
        delete a user from the system. site_name can be name or id of
        the user.

        $ #{CMD_NAME} delete user1
        $ #{CMD_NAME} delete 1

    passwd user_name password
        change password of the user. user_name can be name or id of the
        user.

        $ #{CMD_NAME} passwd user1 password1


    enable user_names
        enable users. An enabled user can use the system. user_names can
        be names or ids of users.

        $ #{CMD_NAME} enable user1 user2
        $ #{CMD_NAME} enable 1

    disable user_names
        disable users. A disabled user can not use the system. user_names
        can be names or ids of users.

        $ #{CMD_NAME} disable user1 user2
        $ #{CMD_NAME} disable 1


    enable_zone user_name zone_names
        allow the specified user to use the zone. When a user is enaled,
        the user can run VMs in the zone. zone_names can be names of zones.

        $ #{CMD_NAME} enable_zone user1 'tokyo tech'

    disable_zone user_name zone_names
        prohibit the specified user to use the zone. When a user is
        prohibited, the user can not run VMs in the zone.
        zone_names can be names of zones.

        $ #{CMD_NAME} disable_zone user1 'tokyo tech'

    limit user_name number
        set a maximum number of VMs a user can run.
        user_name is name or if of a user.
        number is maximum number of VMs the user can run.

        $ #{CMD_NAME} limit user1 5


    list <-x>
        list registered users.

    show <-x> user_names
        show information about specified users. user_names can be names
        or ids of users.

        $ #{CMD_NAME} show user1 user2
        $ #{CMD_NAME} show 1 2


    help
        show this message.

Options:
EOT

  parser.on('-x', '--xml', ': xml output mode') do
    xml_output = true
  end

  parser.parse!(ARGV)
rescue OptionParser::ParseError
  $stderr.puts parser.help
  exit 1
rescue => e
  $stderr.puts e.message + "\n\n"
  $stderr.puts parser.help
  exit 1
end

command = ARGV.shift
case command
#######################################
# show information
when 'info'
  name = File.open(ENV['ONE_AUTH']).read.split(':')[0]
  uid = get_user_id(name)

  user = RenkeiVPE::User.new_with_id(uid, client)
  rc = user.info
  if is_successful?(rc)
    print_user(user, xml_output, false)
    puts
    print_header("%-80s", "ASSIGNED VM LEASES", true)
    system("rvpelease list #{name}")
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# create a user
when 'create'
  check_parameters('create', 2)

  name  = ARGV[0]
  pass  = Digest::SHA1.hexdigest(ARGV[1])
  limit = check_if_integer?(ARGV[2]) ? ARGV[2].to_i : -1
  user = RenkeiVPE::User.new(RenkeiVPE::User.build_xml, client)
  rc = user.allocate(name, pass)
  if is_successful?(rc)
    puts "User[#{user.name}] is created."
    rc = user.limit(limit)
    if is_successful?(rc)
      puts "Limit is set to #{limit}."
    else
      $stderr.puts rc.message
      exit 1
    end
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# delete a user
when 'delete'
  check_parameters('delete', 1)

  name = ARGV[0]
  id = get_user_id(name)
  user = RenkeiVPE::User.new_with_id(id, client)
  rc = user.delete
  if is_successful?(rc)
    puts "User[#{name}] is deleted."
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# change user password
when 'passwd'
  check_parameters('passwd', 2)

  name = ARGV[0]
  pass = Digest::SHA1.hexdigest(ARGV[1])
  id = get_user_id(name)
  user = RenkeiVPE::User.new_with_id(id, client)
  rc = user.passwd(pass)
  if is_successful?(rc)
    puts "Password for User[#{name}] is changed."
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# enable a user
when 'enable'
  check_parameters('enable', 1)

  ARGV.each do |user_name|
    id = get_user_id(user_name)
    user = RenkeiVPE::User.new_with_id(id, client)
    rc = user.enable
    if is_successful?(rc)
      puts "User[#{user_name}] is enabled."
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# disable a user
when 'disable'
  check_parameters('disable', 1)

  ARGV.each do |user_name|
    id = get_user_id(user_name)
    user = RenkeiVPE::User.new_with_id(id, client)
    rc = user.disable
    if is_successful?(rc)
      puts "User[#{user_name}] is disabled."
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# enable a user to use zones
when 'enable_zone'
  check_parameters('enable_zone', 2)

  user_name = ARGV.shift
  id = get_user_id(user_name)
  user = RenkeiVPE::User.new_with_id(id, client)
  ARGV.each do |zone_name|
    zone_id = get_zone_id(zone_name)
    rc = user.enable_zone zone_id
    if is_successful?(rc)
      puts "User[#{user_name}] enabled to use Zone[#{zone_name}]"
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# disable a user to use zones
when 'disable_zone'
  check_parameters('disable_zone', 2)

  user_name = ARGV.shift
  id = get_user_id(user_name)
  user = RenkeiVPE::User.new_with_id(id, client)
  ARGV.each do |zone_name|
    zone_id = get_zone_id(zone_name)
    rc = user.disable_zone zone_id
    if is_successful?(rc)
      puts "User[#{user_name}] disabled to use Zone[#{zone_name}]"
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# limit a user
when 'limit'
  check_parameters('limit', 2)

  user_name = ARGV.shift
  id = get_user_id(user_name)
  user = RenkeiVPE::User.new_with_id(id, client)
  number = ARGV.shift
  unless check_if_integer?(number)
    $stderr.puts "The Second parameter must be an integer: #{number}"
    exit 1
  end
  rc = user.limit(number.to_i)
  if is_successful?(rc)
    puts "User[#{user_name}] is now limited to run upto #{number} VMs."
  else
    $stderr.puts rc.message
    exit 1
  end

#######################################
# list users
when 'list'
  user_pool = RenkeiVPE::UserPool.new(client)
  rc = user_pool.info
  if is_error?(rc)
    $stderr.puts rc.message
    exit 1
  end

  if xml_output
    puts user_pool.to_xml
  else
    print_xml_friendly(list_columns, user_pool, true)
  end

#######################################
# show users
when 'show'
  check_parameters('show', 1)

  ARGV.each do |user_name|
    id = get_user_id(user_name)
    user = RenkeiVPE::User.new_with_id(id, client)
    rc = user.info

    if is_successful?(rc)
      print_user(user, xml_output, true)
    else
      $stderr.puts rc.message
      exit 1
    end
  end

#######################################
# show help
when 'help'
  puts parser.help

else
  $stderr.puts "Unknown command: #{command}"
  $stderr.puts parser.help

end


### Local variables:
### mode: Ruby
### coding: utf-8-unix
### indent-tabs-mode: nil
### End:

#! /bin/env ruby
#
# Copyright 2011-2012 Shinichiro Takizawa
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


##############################################################################
# Environment Configuration
##############################################################################
RVPE_LOCATION = ENV['RVPE_LOCATION']

if !RVPE_LOCATION
  $stderr.puts 'set "RVPE_LOCATION" valiable.'
  exit 1
else
  RUBY_LIB_LOCATION = RVPE_LOCATION + '/lib'
end

$: << RUBY_LIB_LOCATION

##############################################################################
# Required libraries
##############################################################################
require 'renkei-vpe'
require 'renkei-vpe-tool/cli-utilities'
require 'optparse'
require 'stringio'

include RenkeiVPETool::CliUtilities

##############################################################################
# Constant variables
##############################################################################
CMD_NAME = 'rvpeuser'
CMD_HELP = <<EOS
Name
    #{CMD_NAME} - show and edit user information

Synopsis
    #{CMD_NAME} <command> [ options ]

Description
    This command shows and edits information of users who use RENKEI-VPE.
    The administrator of RENKEI-VPE can create, delete, enable, disable and
    show  specified  users  and list all users.  The administrator can also
    change  password of users and  grant/rob  permissions  to use specified
    zones.  A user can see his/her information.

    The <command> is a name of a subcommand of #{CMD_NAME} command.


Commands
    info
        Show user's information.

        $ #{CMD_NAME} info


    create <user_name> <password>
        Create a new user with the specified password.

        $ #{CMD_NAME} create user1 password1

    delete <user_name>
        Delete a user.  <user_name> can be name or id of the user.

        $ #{CMD_NAME} delete user1
        $ #{CMD_NAME} delete 1

    passwd <user_name> <password>
        Change password of the user.  <user_name> can be name or id of the
        user.

        $ #{CMD_NAME} passwd user1 password1


    enable <user_name> [ <user_name> ... ]
        Enable users.  An enabled user can use the system. <user_name> can
        be name or id of a user.

        $ #{CMD_NAME} enable user1 user2
        $ #{CMD_NAME} enable 1

    disable <user_name> [ <user_name> ... ]
        Disable users.  A disabled user can not use the system. <user_name>
        can be name or id of a user.

        $ #{CMD_NAME} disable user1 user2
        $ #{CMD_NAME} disable 1


    enable_zone <user_name> <zone_name> [ <vm_limit> ]
        Allow  the specified user  to run VMs in the zone.  When a user is
        enaled,  the user  can run VMs  in the zone  upto <vm_limit> count.
        Default of <vm_limit> is 1.

        $ #{CMD_NAME} enable_zone user1 'tokyo tech' 10

    disable_zone <user_name> <zone_name> [ <zone_name> ... ]
        Prohibit  the specified user  to use the zone.  When a user is
        prohibited, the user can not run VMs in the zone.

        $ #{CMD_NAME} disable_zone user1 'tokyo tech'


    list [ -x ]
        list registered users.

    show [ -x ] <user_name> [ <user_name> ... ]
        Show information about specified users. <user_name> can be name or
        id of a user.

        $ #{CMD_NAME} show user1 user2
        $ #{CMD_NAME} show 1 2


    help
        Show this message.


Environment Variables
    RVPE_RPC_TIMEOUT
        Set XMLRPC timeout in seconds. Default is 30 seconds.


Options
EOS

##############################################################################
# Global variables
##############################################################################
client = RenkeiVPE::Client.new()
xml_output = false

##############################################################################
# Functions
##############################################################################
def print_user(user, xml_output, verbose=false)
  if xml_output
    puts user.to_xml
  else
    str="%-15s: %-30s"

    # print header
    print_header("%-80s", "USER INFORMATION", true)

    # print ID
    puts str % ['ID', user.id.to_s]  if verbose
    # print Name
    puts str % ['NAME', user.name]
    # print Enable flag
    if user['ENABLED'].to_i == 1
      enable_str = 'Yes'
    else
      enable_str = 'No'
    end
    puts str % ['ENABLE', enable_str]                if verbose
    # print Zones
    zones = []
    zones_i = user['ZONE_IDS'].split(RenkeiVPE::Const::ITEM_SEPARATOR)
    zones_n = user['ZONE_NAMES'].split(RenkeiVPE::Const::ITEM_SEPARATOR)
    zones_l = user['ZONE_LIMITS'].split(RenkeiVPE::Const::ITEM_SEPARATOR)
    zones_i.size.times do |i|
      zone = zones_n[i] + '  ('
      zone += "ID:#{zones_i[i]}  "                   if verbose
      zone += "QUOTA:#{zones_l[i]})"
      zones << zone
    end
    puts str % ['ZONES', zones.shift]
    zones.each do |zone|
      puts str % ['', zone]
    end
    # print Password
    puts str % ['PASSWORD HASH', user['PASSWORD']]  if verbose
  end
end

##############################################################################
# main
##############################################################################

begin
  parser = OptionParser.new
  parser.banner = CMD_HELP

  parser.on('-x', '--xml', ': Output in xml') do
    xml_output = true
  end

  parser.on('-h', '--help', ': Show this message') do
    puts parser.help
    exit 0
  end

  parser.parse!(ARGV)
rescue OptionParser::ParseError => e
  exit_on_parse_error(e.message)
rescue => e
  exit_on_parse_error(e.message)
end

command = ARGV.shift
case command
#######################################
# show information
when 'info'
  name = File.open(ENV['ONE_AUTH']).read.split(':')[0]
  uid = get_user_id(name)

  user = RenkeiVPE::User.new_with_id(uid, client)
  rc = user.info
  if RenkeiVPE.is_successful?(rc)
    # redirect output to a StringIO object
    sio = StringIO.new
    $stdout = sio
    print_user(user, xml_output, false)
    unless xml_output
      puts
      print_header("%-80s", "ASSIGNED VM LEASES", true)
    end
    # print lease list assigned to the user
    opts = (xml_output)? ' -x' : ''
    lease_str = `rvpelease list #{name} #{opts}`
    sio << lease_str

    # output the results
    $stdout = STDOUT
    if xml_output
      doc = REXML::Document.new('<USER_INFO>' + sio.string + '</USER_INFO>')
      formatter = REXML::Formatters::Pretty.new
      formatter.compact = true
      xml_str = ''
      formatter.write(doc.root, xml_str)
      puts xml_str
    else
      puts sio.string
    end
  else
    $stderr.puts 'Error: ' + rc.message
    exit 1
  end

#######################################
# create a user
when 'create'
  check_command('create', 2)

  name  = ARGV[0]
  pass  = Digest::SHA1.hexdigest(ARGV[1])
  user = RenkeiVPE::User.new(RenkeiVPE::User.build_xml, client)
  rc = user.allocate(name, pass)
  if RenkeiVPE.is_successful?(rc)
    puts "User[#{user.name}] is created."
  else
    $stderr.puts 'Error: ' + rc.message
    exit 1
  end

#######################################
# delete a user
when 'delete'
  check_command('delete', 1)

  name = ARGV[0]
  id = get_user_id(name)
  user = RenkeiVPE::User.new_with_id(id, client)
  rc = user.delete
  if RenkeiVPE.is_successful?(rc)
    puts "User[#{name}] is deleted."
  else
    $stderr.puts 'Error: ' + rc.message
    exit 1
  end

#######################################
# change user password
when 'passwd'
  check_command('passwd', 2)

  name = ARGV[0]
  pass = Digest::SHA1.hexdigest(ARGV[1])
  id = get_user_id(name)
  user = RenkeiVPE::User.new_with_id(id, client)
  rc = user.passwd(pass)
  if RenkeiVPE.is_successful?(rc)
    puts "Password for User[#{name}] is changed."
  else
    $stderr.puts 'Error: ' + rc.message
    exit 1
  end

#######################################
# enable a user
when 'enable'
  check_command('enable', 1)

  ARGV.each do |user_name|
    id = get_user_id(user_name)
    user = RenkeiVPE::User.new_with_id(id, client)
    rc = user.enable
    if RenkeiVPE.is_successful?(rc)
      puts "User[#{user_name}] is enabled."
    else
      $stderr.puts 'Error: ' + rc.message
      exit 1
    end
  end

#######################################
# disable a user
when 'disable'
  check_command('disable', 1)

  ARGV.each do |user_name|
    id = get_user_id(user_name)
    user = RenkeiVPE::User.new_with_id(id, client)
    rc = user.disable
    if RenkeiVPE.is_successful?(rc)
      puts "User[#{user_name}] is disabled."
    else
      $stderr.puts 'Error: ' + rc.message
      exit 1
    end
  end

#######################################
# enable a user to use zones
when 'enable_zone'
  check_command('enable_zone', 2)

  user_name = ARGV[0]
  id = get_user_id(user_name)
  user = RenkeiVPE::User.new_with_id(id, client)
  zone_name = ARGV[1]
  zone_id = get_zone_id(zone_name)
  zone_limit = ARGV[2].nil? ? -1 : ARGV[2]

  rc = user.enable_zone(zone_id, zone_limit)
  if RenkeiVPE.is_successful?(rc)
    puts "User[#{user_name}] enabled to use Zone[#{zone_name}]" +
      " with Limit[#{rc}]"
  else
    $stderr.puts 'Error: ' + rc.message
    exit 1
  end

#######################################
# disable a user to use zones
when 'disable_zone'
  check_command('disable_zone', 2)

  user_name = ARGV.shift
  id = get_user_id(user_name)
  user = RenkeiVPE::User.new_with_id(id, client)
  ARGV.each do |zone_name|
    zone_id = get_zone_id(zone_name)
    rc = user.disable_zone zone_id
    if RenkeiVPE.is_successful?(rc)
      puts "User[#{user_name}] disabled to use Zone[#{zone_name}]"
    else
      $stderr.puts 'Error: ' + rc.message
      exit 1
    end
  end

#######################################
# list users
when 'list'
  user_pool = RenkeiVPE::UserPool.new(client)
  rc = user_pool.info
  if RenkeiVPE.is_error?(rc)
    $stderr.puts 'Error: ' + rc.message
    exit 1
  end

  if xml_output
    puts user_pool.to_xml
  else
    list_columns = {
      :id      => { :name => 'ID',
                    :size => 4,
                    :proc => lambda {|d,e| d.id} },
      :user    => { :name => 'USER',
                    :size => 15,
                    :left => true,
                    :proc => lambda {|d,e| d["NAME"]} },
      :default => [:id, :user]
    }
    print_xml_in_table(list_columns, user_pool, true)
  end

#######################################
# show users
when 'show'
  check_command('show', 1)

  ARGV.each do |user_name|
    id = get_user_id(user_name)
    user = RenkeiVPE::User.new_with_id(id, client)
    rc = user.info

    if RenkeiVPE.is_successful?(rc)
      print_user(user, xml_output, true)
    else
      $stderr.puts 'Error: ' + rc.message
      exit 1
    end
  end

#######################################
# show help
when 'help'
  puts parser.help

else
  exit_on_parse_error("Unknown command: #{command}")

end


# Local Variables:
# mode: Ruby
# coding: utf-8
# indent-tabs-mode: nil
# End:

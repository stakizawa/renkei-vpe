#! /bin/env ruby
#
# Copyright 2011-2012 Shinichiro Takizawa
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


##############################################################################
# Environment Configuration
##############################################################################
RVPE_LOCATION = ENV['RVPE_LOCATION']

if !RVPE_LOCATION
  $stderr.puts 'set "RVPE_LOCATION" valiable.'
  exit 1
else
  RUBY_LIB_LOCATION = RVPE_LOCATION + '/lib'
end

$: << RUBY_LIB_LOCATION

##############################################################################
# Required libraries
##############################################################################
require 'renkei-vpe-server'
require 'optparse'
require 'fileutils'
require 'timeout'

##############################################################################
# Global variables
##############################################################################
CMD_NAME = 'rvped'
PID_FILE = RVPE_LOCATION + '/var/rvped.pid'
CNF_FILE = RVPE_LOCATION + '/etc/rvped.conf'

##############################################################################
# Functions
##############################################################################
# print +msg+ on STDOUT then flush
def print_flush(msg)
  STDOUT.print msg
  STDOUT.flush
end

# return 0 if server successfuly starts
# return 1 if server doesn't start
def start_server(is_daemon)
  case status_server
  when 0
    puts 'server is already running'
    return 1
  when 1
    puts "pid file exists. I'll delete it to run the server."
    FileUtils.rm(PID_FILE)
  end

  vardir = File::dirname(PID_FILE)
  FileUtils.mkdir_p(vardir) unless FileTest.exist?(vardir)

  config = RenkeiVPE::ServerConfig.read_config(CNF_FILE)
  server = RenkeiVPE::Server.new(config)
  if is_daemon
    RenkeiVPE::Server.daemonize(PID_FILE) do
      server.start
    end
  else
    server.start
  end

  return 0
end

# return 0 if server successfuly stops
# return 1 if server doesn't stop
def stop_server
  case status_server
  when  1
    puts 'server is not running'
    return 1
  when -1
    puts "pid file doesn't exist."
    return 1
  end

  Process.kill(:TERM, server_pid)
  sleep 1
  if FileTest.exist?("/proc/#{server_pid}")
    begin
      timeout(90) do
        print_flush 'waiting the server to stop'
        loop do
          unless FileTest.exist?("/proc/#{server_pid}")
            break
          else
            sleep 2; print_flush '.'
          end
        end
      end
    rescue Timeout::Error
      puts 'Timeout reached.'
      Process.kill(:KILL, server_pid)
    end
  end
  FileUtils.rm(PID_FILE)

  return 0
end

# return  0 if process exist
# return  1 if process does not exist
# return -1 if PID_FILE does not exist
def status_server
  return -1 unless FileTest.exist?(PID_FILE)

  begin
    Process.getpgid(server_pid)
    return 0
  rescue
    return 1
  end
end

def server_pid
  File.read(PID_FILE).to_i
end

def exit_on_parse_error(errmsg=nil)
  $stderr.puts errmsg if errmsg
  $stderr.puts
  $stderr.puts "Run '#{CMD_NAME} help' to see the usage."
  exit 1
end

##############################################################################
# main
##############################################################################
daemon_mode = true

begin
  parser = OptionParser.new
  parser.banner = <<EOT
NAME
    #{CMD_NAME} - RENKEI-VPE service

Synopsis
    #{CMD_NAME} <command> [ options ]

Commands
    start [ -f ]
        Start daemon.

        $ #{CMD_NAME} start

    stop
        Stop daemon.

        $ #{CMD_NAME} stop

    status
        Ask the daemon its status.

        $ #{CMD_NAME} status

Options
EOT

  parser.on('-f', '--foreground', ": run #{CMD_NAME} in foreground") do
    daemon_mode = false
  end

  parser.on('-h', '--help', ': Show this message') do
    puts parser.help
    exit 0
  end

  parser.parse!(ARGV)
rescue OptionParser::ParseError => e
  exit_on_parse_error(e.message)
  $stderr.puts parser.help
rescue => e
  exit_on_parse_error(e.message)
end

exit_code = 0
command = ARGV.shift
case command
#######################################
# start RenkeiVPE server
when 'start'
  result = start_server(daemon_mode)
  if result == 0
    puts "#{CMD_NAME} starts"
  else
    puts "#{CMD_NAME} doesn't start"
    exit_code = 1
  end

#######################################
# stop RenkeiVPE server
when 'stop'
  result = stop_server
  if result == 0
    puts "#{CMD_NAME} stops"
  else
    puts "#{CMD_NAME} doesn't stop"
    exit_code = 1
  end

#######################################
# ask status of RenkeiVPE server
when 'status'
  result = status_server
  if result == 0
    puts "#{CMD_NAME}(#{server_pid}) is running..."
  else
    puts "#{CMD_NAME} is not running"
    exit_code = 1
  end

#######################################
# show help
when 'help'
  puts parser.help

else
  exit_on_parse_error("Unknown command: #{command}")

end

exit exit_code

### Local variables:
### mode: Ruby
### coding: utf-8-unix
### indent-tabs-mode: nil
### End:

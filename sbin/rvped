#! /bin/env ruby

##############################################################################
# Environment Configuration
##############################################################################
RVPE_LOCATION = ENV['RVPE_LOCATION']

if !RVPE_LOCATION
  $stderr.puts 'set "RVPE_LOCATION" valiable.'
  exit 1
else
  RUBY_LIB_LOCATION = RVPE_LOCATION + '/lib'
end

$: << RUBY_LIB_LOCATION

##############################################################################
# Required libraries
##############################################################################
require 'renkei-vpe-server'
require 'optparse'
require 'fileutils'

##############################################################################
# Global variables
##############################################################################
CMD_NAME = 'rvped'
PID_FILE = RVPE_LOCATION + '/var/rvped.pid'
CNF_FILE = RVPE_LOCATION + '/etc/rvped.conf'

##############################################################################
# Functions
##############################################################################

# return 0 if server successfuly starts
# return 1 if server doesn't start
def start_server(is_daemon)
  case status_server
  when 0
    puts 'server is already running'
    return 1
  when 1
    puts "pid file exists. I'll delete it to run the server."
    FileUtils.rm(PID_FILE)
  end

  config = RenkeiVPE::ServerConfig.read_config(CNF_FILE)
  server = RenkeiVPE::Server.new(config)
  if is_daemon
    RenkeiVPE::Server.daemonize(PID_FILE) do
      server.start
    end
  else
    server.start
  end

  return 0
end

# return 0 if server successfuly stops
# return 1 if server doesn't stop
def stop_server
  case status_server
  when  1
    puts 'server is not running'
    return 1
  when -1
    puts "pid file doesn't exist."
    return 1
  end

  Process.kill(9, server_pid)
  FileUtils.rm(PID_FILE)

  return 0
end

# return  0 if process exist
# return  1 if process does not exist
# return -1 if PID_FILE does not exist
def status_server
  return -1 unless FileTest.exist?(PID_FILE)

  begin
    Process.getpgid(server_pid)
    return 0
  rescue
    return 1
  end
end

def server_pid
  File.read(PID_FILE).to_i
end

##############################################################################
# main
##############################################################################
daemon_mode = true

begin
  parser = OptionParser.new
  parser.banner = <<EOT
Usage:
    #{CMD_NAME} command <options>

Commands:
    start <-f>
        start daemon.

        $ #{CMD_NAME} start

    stop
        stop daemon.

        $ #{CMD_NAME} stop

    status
        ask status the daemon.

        $ #{CMD_NAME} status

Options:
EOT

  parser.on('-f', '--foreground', ": run #{CMD_NAME} in foreground") do
    daemon_mode = false
  end

  parser.parse!(ARGV)
rescue OptionParser::ParseError
  $stderr.puts parser.help
  exit 1
rescue => e
  $stderr.puts e.message + "\n\n"
  $stderr.puts parser.help
  exit 1
end

exit_code = 0
command = ARGV.shift
case command
#######################################
# start RenkeiVPE server
when 'start'
  result = start_server(daemon_mode)
  if result == 0
    puts "#{CMD_NAME} starts"
  else
    puts "#{CMD_NAME} doesn't start"
    exit_code = 1
  end

#######################################
# stop RenkeiVPE server
when 'stop'
  result = stop_server
  if result == 0
    puts "#{CMD_NAME} stops"
  else
    puts "#{CMD_NAME} doesn't stop"
    exit_code = 1
  end

#######################################
# ask status of RenkeiVPE server
when 'status'
  result = status_server
  if result == 0
    puts "#{CMD_NAME}(#{server_pid}) is running..."
  else
    puts "#{CMD_NAME} is not running"
    exit_code = 1
  end

#######################################
# show help
when 'help'
  puts parser.help

else
  $stderr.puts "Unknown command: #{command}"
  $stderr.puts parser.help

end

exit exit_code

### Local variables:
### mode: Ruby
### coding: utf-8-unix
### indent-tabs-mode: nil
### End:
